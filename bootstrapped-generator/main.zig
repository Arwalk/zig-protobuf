const warn = @import("std").debug.warn;
const std = @import("std");
const pb = @import("protobuf");
const plugin = @import("google/protobuf/compiler.pb.zig");
const descriptor = @import("google/protobuf.pb.zig");
const mem = std.mem;
const FullName = @import("./FullName.zig").FullName;

const allocator = std.heap.page_allocator;

const string = []const u8;

pub const std_options: std.Options = .{ .log_scope_levels = &[_]std.log.ScopeLevel{.{ .level = .warn, .scope = .zig_protobuf }} };

pub fn main() !void {
    var stdin_buf: [4096]u8 = undefined;
    var stdin = std.fs.File.stdin().reader(&stdin_buf);
    const file_buffer = try stdin.interface.allocRemaining(allocator, .unlimited);
    defer allocator.free(file_buffer);

    const request: plugin.CodeGeneratorRequest = try plugin.CodeGeneratorRequest.decode(file_buffer, allocator);

    var ctx: GenerationContext = GenerationContext{ .req = request };

    try ctx.processRequest();

    var std_buffer: [4096]u8 = undefined;
    var stdout = std.fs.File.stdout().writer(&std_buffer);
    const r = try ctx.res.encode(allocator);
    try stdout.interface.writeAll(r);
    try stdout.interface.flush();
}

const GenerationContext = struct {
    req: plugin.CodeGeneratorRequest,
    res: plugin.CodeGeneratorResponse = plugin.CodeGeneratorResponse.init(allocator),

    /// map of known packages
    known_packages: std.StringHashMap(FullName) = std.StringHashMap(FullName).init(allocator),

    /// map of "package.fully.qualified.names" to output string lists
    output_lists: std.StringHashMap(std.ArrayList([]const u8)) = std.StringHashMap(std.ArrayList([]const u8)).init(allocator),

    /// map of message names to their dependencies
    message_deps: std.StringHashMap(std.StringHashMap(bool)) = std.StringHashMap(std.StringHashMap(bool)).init(allocator),

    const Self = @This();

    pub fn processRequest(self: *Self) !void {
        defer {
            // Clean up message dependencies
            var it = self.message_deps.iterator();
            while (it.next()) |entry| {
                entry.value_ptr.deinit();
            }
            self.message_deps.deinit();
        }

        for (self.req.proto_file.items) |file| {
            const t: descriptor.FileDescriptorProto = file;

            if (t.package) |package| {
                try self.known_packages.put(package.getSlice(), FullName{ .buf = package.getSlice() });
            } else {
                self.res.@"error" = pb.ManagedString{ .Owned = .{
                    .str = try std.fmt.allocPrint(
                        allocator,
                        "ERROR Package directive missing in {s}\n",
                        .{file.name.?.getSlice()},
                    ),
                    .allocator = allocator,
                } };
                return;
            }
        }

        for (self.req.proto_file.items) |file| {
            const t: descriptor.FileDescriptorProto = file;

            const name = FullName{ .buf = t.package.?.getSlice() };

            try self.printFileDeclarations(name, file);
        }

        var it = self.output_lists.iterator();
        while (it.next()) |entry| {
            var ret = plugin.CodeGeneratorResponse.File.init(allocator);

            ret.name = pb.ManagedString.move(try self.fileNameFromPackage(entry.key_ptr.*), allocator);
            ret.content = pb.ManagedString.move(try std.mem.concat(allocator, u8, entry.value_ptr.*.items), allocator);

            try self.res.file.append(ret);
        }

        self.res.supported_features = @intFromEnum(plugin.CodeGeneratorResponse.Feature.FEATURE_PROTO3_OPTIONAL);
    }

    fn fileNameFromPackage(self: *Self, package: string) !string {
        return try std.fmt.allocPrint(allocator, "{s}.pb.zig", .{try self.packageNameToOutputFileName(package)});
    }

    fn packageNameToOutputFileName(_: *Self, n: string) !string {
        var r: []u8 = try allocator.alloc(u8, n.len);
        for (n, 0..) |byte, i| {
            r[i] = switch (byte) {
                '.', '/', '\\' => '/',
                else => byte,
            };
        }
        return r;
    }

    fn getOutputList(self: *Self, name: FullName) !*std.ArrayList([]const u8) {
        const entry = try self.output_lists.getOrPut(name.buf);

        if (!entry.found_existing) {
            var list = std.ArrayList([]const u8).init(allocator);

            try list.append(try std.fmt.allocPrint(allocator,
                \\// Code generated by protoc-gen-zig
                \\ ///! package {s}
                \\const std = @import("std");
                \\const Allocator = std.mem.Allocator;
                \\const ArrayList = std.ArrayList;
                \\
                \\const protobuf = @import("protobuf");
                \\const ManagedString = protobuf.ManagedString;
                \\const fd = protobuf.fd;
                \\const ManagedStruct = protobuf.ManagedStruct;
                \\const json = protobuf.json;
                \\const UnionDecodingError = protobuf.UnionDecodingError;
                \\
            , .{name.buf}));

            // collect all imports from all files sharing the same package
            var importedPackages = std.StringHashMap(bool).init(allocator);

            for (self.req.proto_file.items) |file| {
                if (name.eqlString(file.package.?.getSlice())) {
                    for (file.dependency.items) |dep| {
                        for (self.req.proto_file.items, 0..) |item, index| {
                            if (std.mem.eql(u8, dep.getSlice(), item.name.?.getSlice())) {
                                var is_public_dep: bool = false;

                                // find whether an import is marked as public
                                for (file.public_dependency.items) |public_dep| {
                                    if (public_dep == index) {
                                        is_public_dep = true;
                                    }
                                }

                                try importedPackages.put(item.package.?.getSlice(), is_public_dep);
                            }
                        }
                    }
                }
            }

            var it = importedPackages.iterator();
            while (it.next()) |package| {
                if (!std.mem.eql(u8, package.key_ptr.*, name.buf)) {
                    try list.append(try std.fmt.allocPrint(allocator, "/// import package {s}\n", .{package.key_ptr.*}));

                    const optional_pub_directive: []const u8 = if (package.value_ptr.*) "pub const" else "const";

                    try list.append(try std.fmt.allocPrint(allocator, "{s} {!s} = @import(\"{!s}\");\n", .{ optional_pub_directive, self.escapeFqn(package.key_ptr.*), self.resolvePath(name.buf, package.key_ptr.*) }));
                }
            }

            entry.value_ptr.* = list;
        }

        return entry.value_ptr;
    }

    /// resolves an import path from the file A relative to B
    fn resolvePath(self: *Self, a: string, b: string) !string {
        const aPath = std.fs.path.dirname(try self.fileNameFromPackage(a)) orelse "";
        const bPath = try self.fileNameFromPackage(b);

        // to resolve some escaping oddities, the windows path separator is canonicalized to /
        const resolvedRelativePath = try std.fs.path.relative(allocator, aPath, bPath);
        return std.mem.replaceOwned(u8, self.req.file_to_generate.allocator, resolvedRelativePath, "\\", "/");
    }

    const SourceCodeInfo = struct {
        fn appendComment(out_lines: *std.ArrayList(string), raw_comment: []const u8) !void {
            var comment_lines = std.mem.splitScalar(u8, raw_comment, '\n');
            var trailing_empties: usize = 0;
            while (comment_lines.next()) |comment_line| {
                if (comment_line.len == 0) {
                    trailing_empties += 1;
                } else {
                    trailing_empties = 0;
                }
                try out_lines.append(try std.fmt.allocPrint(
                    allocator,
                    "//{s}\n",
                    .{comment_line},
                ));
            }
            for (0..trailing_empties) |_| {
                const free_str = out_lines.pop().?;
                allocator.free(free_str);
            }
        }

        /// Get source code location of a message's field.
        fn getFieldLocation(
            file: descriptor.FileDescriptorProto,
            root_path: []const i32,
            field_number: i32,
        ) ?descriptor.SourceCodeInfo.Location {
            const sci = file.source_code_info orelse return null;

            for (sci.location.items) |location| {
                const path = location.path.items;

                if (path.len != root_path.len + 1) continue;
                if (!std.mem.eql(i32, root_path, path[0..root_path.len]))
                    continue;

                const rem_path = path[root_path.len..];

                if (rem_path[0] != field_number) continue;

                return location;
            }

            return null;
        }

        /// Get source code location of one value in a message's repeated field.
        fn getRepeatedFieldLocation(
            file: descriptor.FileDescriptorProto,
            root_path: []const i32,
            field_number: i32,
            index: usize,
        ) ?descriptor.SourceCodeInfo.Location {
            const sci = file.source_code_info orelse return null;

            for (sci.location.items) |location| {
                const path = location.path.items;

                if (path.len != root_path.len + 2) continue;
                if (!std.mem.eql(i32, root_path, path[0..root_path.len]))
                    continue;

                const rem_path = path[root_path.len..];

                if (rem_path[0] != field_number) continue;
                if (rem_path[1] != index) continue;

                return location;
            }

            return null;
        }
    };

    pub fn printFileDeclarations(self: *Self, fqn: FullName, file: descriptor.FileDescriptorProto) !void {
        const list = try self.getOutputList(fqn);

        try self.generateEnums(list, fqn, file, &.{}, file);
        try self.generateMessages(list, fqn, file, &.{}, file);
    }

    fn generateEnums(
        ctx: *Self,
        list: *std.ArrayList(string),
        fqn: FullName,
        file: descriptor.FileDescriptorProto,
        // Source code info path to `root` from `file`.
        file_root_path: ?[]const i32,
        // `DescriptorProto` or `FileDescriptorProto`containing enums.
        root: anytype,
    ) !void {
        _ = ctx;
        _ = fqn;
        const enum_field = if (comptime @TypeOf(root) == descriptor.FileDescriptorProto)
            @field(descriptor.FileDescriptorProto._desc_table, "enum_type")
        else if (comptime @TypeOf(root) == descriptor.DescriptorProto)
            @field(descriptor.DescriptorProto._desc_table, "enum_type")
        else {
            @compileError(std.fmt.comptimePrint(
                "invalid root type `{s}` passed to generateEnums",
                .{@typeName(@TypeOf(root))},
            ));
        };

        // Enums cannot be a "generated" type in protobuf; must have source location.
        std.debug.assert(file_root_path != null);

        for (root.enum_type.items, 0..) |theEnum, enum_i| {
            const e: descriptor.EnumDescriptorProto = theEnum;

            try list.append(&.{'\n'});

            // All enum fields should have a source code location.
            const e_loc = SourceCodeInfo.getRepeatedFieldLocation(
                file,
                file_root_path.?,
                enum_field.field_number.?,
                enum_i,
            ).?;

            if (e_loc.leading_comments) |leading_comments| {
                try SourceCodeInfo.appendComment(list, leading_comments.getSlice());
            }

            try list.append(try std.fmt.allocPrint(
                allocator,
                "pub const {s} = enum(i32) {{\n",
                .{e.name.?.getSlice()},
            ));

            for (e.value.items, 0..) |elem, elem_i| {
                const field_loc = SourceCodeInfo.getRepeatedFieldLocation(
                    file,
                    e_loc.path.items,
                    2, // `value` field in enum descriptor
                    elem_i,
                );
                if (field_loc) |fl| {
                    if (fl.leading_comments) |leading_comments| {
                        try SourceCodeInfo.appendComment(list, leading_comments.getSlice());
                    }
                }

                try list.append(try std.fmt.allocPrint(
                    allocator,
                    "   {s} = {d},\n",
                    .{ elem.name.?.getSlice(), elem.number orelse 0 },
                ));
            }

            try list.append("    _,\n};\n\n");
        }
    }

    fn getFieldName(_: *Self, field: descriptor.FieldDescriptorProto) !string {
        return escapeName(field.name.?.getSlice());
    }

    fn escapeName(name: string) !string {
        if (std.zig.Token.keywords.get(name) != null)
            return try std.fmt.allocPrint(allocator, "@\"{s}\"", .{name})
        else
            return name;
    }

    fn fieldTypeFqn(ctx: *Self, parentFqn: FullName, file: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto) !string {
        if (field.type_name) |typeName| {
            const fullTypeName = FullName{ .buf = typeName.getSlice()[1..] };
            if (fullTypeName.parent()) |parent| {
                if (parent.eql(parentFqn)) {
                    const diff_idx = std.mem.indexOfDiff(
                        u8,
                        fullTypeName.buf,
                        file.package.?.getSlice(),
                    ).?;
                    return fullTypeName.buf[diff_idx + 1 ..];
                }
                if (parent.eql(FullName{ .buf = file.package.?.getSlice() })) {
                    return fullTypeName.name().buf;
                }
            }

            var parent: ?FullName = fullTypeName.parent();
            const filePackage = FullName{ .buf = file.package.?.getSlice() };

            // iterate parents until we find a parent that matches the known_packages
            while (parent != null) {
                var it = ctx.known_packages.valueIterator();

                while (it.next()) |value| {

                    // it is in current package, return full name
                    if (filePackage.eql(parent.?)) {
                        const name = fullTypeName.buf[parent.?.buf.len + 1 ..];
                        return name;
                    }

                    // it is in different package. return fully qualified name including accessor
                    if (value.eql(parent.?)) {
                        const prop = try ctx.escapeFqn(parent.?.buf);
                        const name = fullTypeName.buf[prop.len + 1 ..];
                        return try std.fmt.allocPrint(allocator, "{s}.{s}", .{ prop, name });
                    }
                }

                parent = parent.?.parent();
            }

            std.debug.print(
                "Unknown type: {s} from {s} in {s}\n",
                .{ fullTypeName.buf, parentFqn.buf, file.package.?.getSlice() },
            );

            return try ctx.escapeFqn(field.type_name.?.getSlice());
        }
        @panic("field has no type");
    }

    fn escapeFqn(_: *Self, n: string) !string {
        var r: []u8 = try allocator.alloc(u8, n.len);
        for (n, 0..) |byte, i| {
            r[i] = switch (byte) {
                '.', '/', '\\' => '_',
                else => byte,
            };
        }
        return r;
    }

    fn isRepeated(_: *Self, field: descriptor.FieldDescriptorProto) bool {
        if (field.label) |l| {
            return l == .LABEL_REPEATED;
        } else {
            return false;
        }
    }

    fn isScalarNumeric(t: descriptor.FieldDescriptorProto.Type) bool {
        return switch (t) {
            .TYPE_DOUBLE, .TYPE_FLOAT, .TYPE_INT32, .TYPE_INT64, .TYPE_UINT32, .TYPE_UINT64, .TYPE_SINT32, .TYPE_SINT64, .TYPE_FIXED32, .TYPE_FIXED64, .TYPE_SFIXED32, .TYPE_SFIXED64, .TYPE_BOOL => true,
            else => false,
        };
    }

    fn isPacked(_: *Self, file: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto) bool {
        const default = if (is_proto3_file(file))
            if (field.type) |t|
                isScalarNumeric(t)
            else
                false
        else
            false;

        if (field.options) |o| {
            if (o.@"packed") |p| {
                return p;
            }
        }
        return default;
    }

    fn isOptional(_: *Self, file: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto) bool {
        if (is_proto3_file(file)) {
            return field.proto3_optional == true;
        }

        if (field.label) |l| {
            return l == .LABEL_OPTIONAL;
        } else {
            return false;
        }
    }

    fn getFieldType(ctx: *Self, fqn: FullName, file: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto, is_union: bool) !string {
        var prefix: string = "";
        var postfix: string = "";
        const repeated = ctx.isRepeated(field);
        const t = field.type.?;

        if (!repeated) {
            if (!is_union) {
                // look for optional types
                switch (t) {
                    .TYPE_MESSAGE => {
                        // Check if the field type is self-referential
                        if (field.type_name) |type_name| {
                            const raw_type = type_name.getSlice();
                            const dep_name = raw_type[1..]; // Remove leading dot
                            const last_dot = std.mem.lastIndexOf(u8, dep_name, ".");
                            const simple_name = if (last_dot) |idx| dep_name[idx + 1 ..] else dep_name;

                            // Get the current message name from fqn
                            const current_msg = fqn.name().buf;

                            if (std.mem.eql(u8, simple_name, current_msg)) {
                                prefix = "?ManagedStruct(";
                                postfix = ")";
                            } else {
                                prefix = "?";
                            }
                        } else {
                            prefix = "?";
                        }
                    },
                    else => if (ctx.isOptional(file, field)) {
                        prefix = "?";
                    },
                }
            }
        } else {
            prefix = "ArrayList(";
            postfix = ")";
        }

        const infix: string = switch (t) {
            .TYPE_SINT32, .TYPE_SFIXED32, .TYPE_INT32 => "i32",
            .TYPE_UINT32, .TYPE_FIXED32 => "u32",
            .TYPE_INT64, .TYPE_SINT64, .TYPE_SFIXED64 => "i64",
            .TYPE_UINT64, .TYPE_FIXED64 => "u64",
            .TYPE_BOOL => "bool",
            .TYPE_DOUBLE => "f64",
            .TYPE_FLOAT => "f32",
            .TYPE_STRING, .TYPE_BYTES => "ManagedString",
            .TYPE_ENUM, .TYPE_MESSAGE => try ctx.fieldTypeFqn(fqn, file, field),
            else => {
                std.debug.print("Unrecognized type {}\n", .{t});
                @panic("Unrecognized type");
            },
        };

        return try std.mem.concat(allocator, u8, &.{ prefix, infix, postfix });
    }

    fn getFieldDefault(ctx: *Self, field: descriptor.FieldDescriptorProto, file: descriptor.FileDescriptorProto, nullable: bool) !?string {
        // ArrayLists need to be initialized
        const repeated = ctx.isRepeated(field);
        if (repeated) return null;

        const is_proto3 = is_proto3_file(file);

        if (nullable and field.default_value == null) {
            return "null";
        }

        // proto3 does not support explicit default values, the default scalar values are used instead
        if (is_proto3) {
            return switch (field.type.?) {
                .TYPE_SINT32,
                .TYPE_SFIXED32,
                .TYPE_INT32,
                .TYPE_UINT32,
                .TYPE_FIXED32,
                .TYPE_INT64,
                .TYPE_SINT64,
                .TYPE_SFIXED64,
                .TYPE_UINT64,
                .TYPE_FIXED64,
                .TYPE_FLOAT,
                .TYPE_DOUBLE,
                => "0",
                .TYPE_BOOL => "false",
                .TYPE_STRING, .TYPE_BYTES => ".Empty",
                .TYPE_ENUM => "@enumFromInt(0)",
                else => null,
            };
        }

        if (field.default_value == null) return null;

        return switch (field.type.?) {
            .TYPE_SINT32, .TYPE_SFIXED32, .TYPE_INT32, .TYPE_UINT32, .TYPE_FIXED32, .TYPE_INT64, .TYPE_SINT64, .TYPE_SFIXED64, .TYPE_UINT64, .TYPE_FIXED64, .TYPE_BOOL => field.default_value.?.getSlice(),
            .TYPE_FLOAT => if (std.mem.eql(u8, field.default_value.?.getSlice(), "inf")) "std.math.inf(f32)" else if (std.mem.eql(u8, field.default_value.?.getSlice(), "-inf")) "-std.math.inf(f32)" else if (std.mem.eql(u8, field.default_value.?.getSlice(), "nan")) "std.math.nan(f32)" else field.default_value.?.getSlice(),
            .TYPE_DOUBLE => if (std.mem.eql(u8, field.default_value.?.getSlice(), "inf")) "std.math.inf(f64)" else if (std.mem.eql(u8, field.default_value.?.getSlice(), "-inf")) "-std.math.inf(f64)" else if (std.mem.eql(u8, field.default_value.?.getSlice(), "nan")) "std.math.nan(f64)" else field.default_value.?.getSlice(),
            .TYPE_STRING, .TYPE_BYTES => if (field.default_value.?.isEmpty())
                ".Empty"
            else
                try std.mem.concat(allocator, u8, &.{ "ManagedString.static(", try formatSliceEscapeImpl(field.default_value.?.getSlice()), ")" }),
            .TYPE_ENUM => try std.mem.concat(allocator, u8, &.{ ".", field.default_value.?.getSlice() }),
            else => null,
        };
    }

    fn getFieldTypeDescriptor(ctx: *Self, _: FullName, file: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto, is_union: bool) !string {
        _ = is_union;
        var prefix: string = "";

        var postfix: string = "";

        if (ctx.isRepeated(field)) {
            if (ctx.isPacked(file, field)) {
                prefix = ".{ .PackedList = ";
            } else {
                prefix = ".{ .List = ";
            }
            postfix = "}";
        }

        const infix: string = switch (field.type.?) {
            .TYPE_DOUBLE, .TYPE_SFIXED64, .TYPE_FIXED64 => ".{ .FixedInt = .I64 }",
            .TYPE_FLOAT, .TYPE_SFIXED32, .TYPE_FIXED32 => ".{ .FixedInt = .I32 }",
            .TYPE_ENUM, .TYPE_UINT32, .TYPE_UINT64, .TYPE_BOOL, .TYPE_INT32, .TYPE_INT64 => ".{ .Varint = .Simple }",
            .TYPE_SINT32, .TYPE_SINT64 => ".{ .Varint = .ZigZagOptimized }",
            .TYPE_STRING => ".String",
            .TYPE_BYTES => ".Bytes",
            .TYPE_MESSAGE => ".{ .SubMessage = {} }",
            else => {
                std.debug.print("Unrecognized type {}\n", .{field.type.?});
                @panic("Unrecognized type");
            },
        };

        return try std.mem.concat(allocator, u8, &.{ prefix, infix, postfix });
    }

    fn generateFieldDescriptor(ctx: *Self, list: *std.ArrayList(string), fqn: FullName, file: descriptor.FileDescriptorProto, message: descriptor.DescriptorProto, field: descriptor.FieldDescriptorProto, is_union: bool) !void {
        _ = message;
        const name = try ctx.getFieldName(field);
        const descStr = try ctx.getFieldTypeDescriptor(fqn, file, field, is_union);
        const format = "        .{s} = fd({?d}, {s}),\n";
        try list.append(try std.fmt.allocPrint(allocator, format, .{ name, field.number, descStr }));
    }

    fn generateFieldDeclaration(ctx: *Self, list: *std.ArrayList(string), fqn: FullName, file: descriptor.FileDescriptorProto, message: descriptor.DescriptorProto, field: descriptor.FieldDescriptorProto, is_union: bool) !void {
        _ = message;

        const type_str = try ctx.getFieldType(fqn, file, field, is_union);
        const field_name = try ctx.getFieldName(field);
        const nullable = type_str[0] == '?';

        if (try ctx.getFieldDefault(field, file, nullable)) |default_value| {
            try list.append(try std.fmt.allocPrint(allocator, "    {s}: {s} = {s},\n", .{ field_name, type_str, default_value }));
        } else {
            try list.append(try std.fmt.allocPrint(allocator, "    {s}: {s},\n", .{ field_name, type_str }));
        }
    }

    /// this function returns the amount of options available for a given "oneof" declaration
    ///
    /// since protobuf 3.14, optional values in proto3 are wrapped in a single-element
    /// oneof to enable optional behavior in most languages. since we have optional types
    /// in zig, we can not use it for a better end-user experience and for readability
    fn amountOfElementsInOneofUnion(_: *Self, message: descriptor.DescriptorProto, oneof_index: ?i32) u32 {
        if (oneof_index == null) return 0;

        var count: u32 = 0;
        for (message.field.items) |f| {
            if (oneof_index == f.oneof_index)
                count += 1;
        }

        return count;
    }

    fn generateMessages(
        ctx: *Self,
        list: *std.ArrayList(string),
        fqn: FullName,
        file: descriptor.FileDescriptorProto,
        // Source code info path to `root` from `file`.
        file_root_path: ?[]const i32,
        // `DescriptorProto` or `FileDescriptorProto` containing messages.
        root: anytype,
    ) !void {
        const messages, const message_field = if (comptime @TypeOf(root) == descriptor.FileDescriptorProto)
            .{ root.message_type, @field(descriptor.FileDescriptorProto._desc_table, "message_type") }
        else if (comptime @TypeOf(root) == descriptor.DescriptorProto)
            .{ root.nested_type, @field(descriptor.DescriptorProto._desc_table, "nested_type") }
        else {
            @compileError(std.fmt.comptimePrint(
                "invalid root type `{s}` passed to generateMessages",
                .{@typeName(@TypeOf(root))},
            ));
        };

        for (messages.items, 0..) |message, message_i| {
            const m: descriptor.DescriptorProto = message;
            const messageFqn = try fqn.append(allocator, m.name.?.getSlice());

            try list.append(&.{'\n'});

            const m_loc = b: {
                break :b SourceCodeInfo.getRepeatedFieldLocation(
                    file,
                    file_root_path orelse break :b null,
                    message_field.field_number.?,
                    message_i,
                );
            };
            if (m_loc) |loc| {
                if (loc.leading_comments) |leading_comments| {
                    try SourceCodeInfo.appendComment(list, leading_comments.getSlice());
                }
            }

            try list.append(try std.fmt.allocPrint(
                allocator,
                "pub const {s} = struct {{\n",
                .{m.name.?.getSlice()},
            ));

            // append all fields that are not part of a oneof
            for (m.field.items, 0..) |f, f_i| {
                if (f.oneof_index == null or ctx.amountOfElementsInOneofUnion(m, f.oneof_index) == 1) {
                    add_comment: {
                        const loc = m_loc orelse break :add_comment;
                        const f_loc = SourceCodeInfo.getRepeatedFieldLocation(
                            file,
                            loc.path.items,
                            2, // `field` field in message descriptor
                            f_i,
                        ) orelse break :add_comment;
                        if (f_loc.leading_comments) |leading_comments| {
                            try SourceCodeInfo.appendComment(list, leading_comments.getSlice());
                        }
                    }

                    try ctx.generateFieldDeclaration(list, messageFqn, file, m, f, false);
                }
            }

            // print all oneof fields
            for (m.oneof_decl.items, 0..) |oneof, i| {
                const union_element_count = ctx.amountOfElementsInOneofUnion(m, @as(i32, @intCast(i)));
                if (union_element_count > 1) {
                    add_comment: {
                        const loc = m_loc orelse break :add_comment;
                        const oneof_loc = SourceCodeInfo.getRepeatedFieldLocation(
                            file,
                            loc.path.items,
                            8, // `oneof_decl` field in message descriptor
                            i,
                        ) orelse break :add_comment;
                        if (oneof_loc.leading_comments) |leading_comments| {
                            try SourceCodeInfo.appendComment(list, leading_comments.getSlice());
                        }
                    }

                    const oneof_name = oneof.name.?.getSlice();
                    try list.append(try std.fmt.allocPrint(
                        allocator,
                        "    {s}: ?{s}_union,\n",
                        .{ try escapeName(oneof_name), oneof_name },
                    ));
                }
            }

            // then print the oneof declarations
            for (m.oneof_decl.items, 0..) |oneof, i| {
                // only emit unions that have more than one element
                const union_element_count = ctx.amountOfElementsInOneofUnion(m, @as(i32, @intCast(i)));
                if (union_element_count > 1) {
                    const oneof_name = oneof.name.?.getSlice();

                    try list.append(try std.fmt.allocPrint(allocator,
                        \\
                        \\    pub const _{s}_case = enum {{
                        \\
                    , .{oneof_name}));

                    for (m.field.items) |field| {
                        const f: descriptor.FieldDescriptorProto = field;
                        if (f.oneof_index orelse -1 == @as(i32, @intCast(i))) {
                            const name = try ctx.getFieldName(f);
                            try list.append(try std.fmt.allocPrint(allocator, "      {s},\n", .{name}));
                        }
                    }

                    try list.append(try std.fmt.allocPrint(allocator,
                        \\    }};
                        \\    pub const {s}_union = union(_{s}_case) {{
                        \\
                    , .{ oneof_name, oneof_name }));

                    for (m.field.items, 0..) |field, field_i| {
                        const f: descriptor.FieldDescriptorProto = field;
                        if (f.oneof_index orelse -1 == @as(i32, @intCast(i))) {
                            add_comment: {
                                const loc = m_loc orelse break :add_comment;
                                const f_loc = SourceCodeInfo.getRepeatedFieldLocation(
                                    file,
                                    loc.path.items,
                                    2, // `field` field in message descriptor
                                    field_i,
                                ) orelse break :add_comment;
                                if (f_loc.leading_comments) |leading_comments| {
                                    try SourceCodeInfo.appendComment(list, leading_comments.getSlice());
                                }
                            }

                            const name = try ctx.getFieldName(f);
                            const typeStr = try ctx.getFieldType(messageFqn, file, f, true);
                            try list.append(try std.fmt.allocPrint(allocator, "      {s}: {s},\n", .{ name, typeStr }));
                        }
                    }

                    try list.append(
                        \\    pub const _union_desc = .{
                        \\
                    );

                    for (m.field.items) |field| {
                        const f: descriptor.FieldDescriptorProto = field;
                        if (f.oneof_index orelse -1 == @as(i32, @intCast(i))) {
                            try ctx.generateFieldDescriptor(list, messageFqn, file, m, f, true);
                        }
                    }

                    try list.append(
                        \\      };
                        \\    };
                        \\
                    );
                }
            }

            // field descriptors
            try list.append(
                \\
                \\    pub const _desc_table = .{
                \\
            );

            // first print fields
            for (m.field.items) |f| {
                if (f.oneof_index == null or ctx.amountOfElementsInOneofUnion(m, f.oneof_index) == 1) {
                    try ctx.generateFieldDescriptor(list, messageFqn, file, m, f, false);
                }
            }

            // print all oneof fields
            for (m.oneof_decl.items, 0..) |oneof, i| {
                // only emit unions that have more than one element
                const union_element_count = ctx.amountOfElementsInOneofUnion(m, @as(i32, @intCast(i)));
                if (union_element_count > 1) {
                    const oneof_name = oneof.name.?.getSlice();
                    try list.append(try std.fmt.allocPrint(allocator, "    .{s} = fd(null, .{{ .OneOf = {s}_union }}),\n", .{ oneof_name, oneof_name }));
                }
            }

            try list.append(
                \\    };
                \\
            );

            // All non-generated (e.g. not `map` field type) enums and messages
            // have a source code location. Any generated submessage types won't
            // have further submessages/enums.
            if (m_loc) |loc| {
                try ctx.generateEnums(list, messageFqn, file, loc.path.items, m);
                try ctx.generateMessages(list, messageFqn, file, loc.path.items, m);
            }

            try list.append(try std.fmt.allocPrint(allocator,
                \\
                \\    pub fn encode(self: @This(), allocator: Allocator) Allocator.Error![]u8 {{
                \\        return protobuf.pb_encode(self, allocator);
                \\    }}
                \\    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {{
                \\        return protobuf.pb_decode(@This(), input, allocator);
                \\    }}
                \\    pub fn init(allocator: Allocator) @This() {{
                \\        return protobuf.pb_init(@This(), allocator);
                \\    }}
                \\    pub fn deinit(self: @This()) void {{
                \\        return protobuf.pb_deinit(self);
                \\    }}
                \\    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {{
                \\        return protobuf.pb_dupe(@This(), self, allocator);
                \\    }}
                \\    pub fn json_decode(
                \\        input: []const u8,
                \\        options: json.ParseOptions,
                \\        allocator: Allocator,
                \\    ) !std.json.Parsed(@This()) {{
                \\        return protobuf.pb_json_decode(@This(), input, options, allocator);
                \\    }}
                \\    pub fn json_encode(
                \\        self: @This(),
                \\        options: json.Stringify.Options,
                \\        allocator: Allocator,
                \\    ) ![]const u8 {{
                \\        return protobuf.pb_json_encode(self, options, allocator);
                \\    }}
                \\
                \\    // This method is used by std.json
                \\    // internally for deserialization. DO NOT RENAME!
                \\      pub fn jsonParse(
                \\        allocator: Allocator,
                \\        source: anytype,
                \\        options: json.ParseOptions,
                \\    ) !@This() {{
                \\        return protobuf.pb_json_parse(@This(), allocator, source, options);
                \\    }}
                \\
                \\    // This method is used by std.json
                \\    // internally for serialization. DO NOT RENAME!
                \\    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {{
                \\        return protobuf.pb_jsonStringify(@This(), self, jws);
                \\    }}
                \\}};
                \\
            , .{}));
        }
    }

    /// Analyzes message dependencies to detect self-referential messages
    fn analyzeMessageDependencies(self: *Self, fqn: FullName, message: descriptor.DescriptorProto) !bool {
        const message_name = message.name.?.getSlice();
        const full_message_name = fqn.buf; // Use package name directly
        var deps = std.StringHashMap(bool).init(allocator);

        // Check fields for message types
        for (message.field.items) |field| {
            if (field.type) |t| {
                if (t == .TYPE_MESSAGE) {
                    if (field.type_name) |type_name| {
                        const raw_type = type_name.getSlice();
                        const dep_name = raw_type[1..]; // Remove leading dot
                        try deps.put(dep_name, true);

                        // Check for direct self-reference by comparing the last part of the type name
                        const last_dot = std.mem.lastIndexOf(u8, dep_name, ".");
                        const simple_name = if (last_dot) |idx| dep_name[idx + 1 ..] else dep_name;

                        if (std.mem.eql(u8, simple_name, message_name)) {
                            return true;
                        }
                    }
                }
            }
        }

        // Store dependencies for this message
        try self.message_deps.put(full_message_name, deps);

        // Check if this message is self-referential (directly or indirectly)
        var visited = std.StringHashMap(bool).init(allocator);
        defer visited.deinit();
        return self.isMessageSelfReferential(full_message_name, &visited);
    }

    /// Recursively checks if a message is self-referential
    fn isMessageSelfReferential(self: *Self, message_name: string, visited: *std.StringHashMap(bool)) bool {
        if (visited.get(message_name)) |_| {
            return true; // Found a cycle
        }

        if (self.message_deps.get(message_name)) |deps| {
            var it = deps.iterator();
            visited.put(message_name, true) catch return false;
            defer _ = visited.remove(message_name);

            while (it.next()) |dep| {
                const last_dot = std.mem.lastIndexOf(u8, dep.key_ptr.*, ".");
                const simple_name = if (last_dot) |idx| dep.key_ptr.*[idx + 1 ..] else dep.key_ptr.*;
                const last_dot_msg = std.mem.lastIndexOf(u8, message_name, ".");
                const msg_simple_name = if (last_dot_msg) |idx| message_name[idx + 1 ..] else message_name;

                // Check for self-reference by comparing simple names
                if (std.mem.eql(u8, simple_name, msg_simple_name)) {
                    return true;
                }
                // Also check for indirect cycles
                if (self.isMessageSelfReferential(dep.key_ptr.*, visited)) {
                    return true;
                }
            }
        }

        return false;
    }
};

fn is_proto3_file(file: descriptor.FileDescriptorProto) bool {
    if (file.syntax) |syntax| return std.mem.eql(u8, syntax.getSlice(), "proto3");
    return false;
}

pub fn formatSliceEscapeImpl(
    str: string,
) !string {
    const charset = "0123456789ABCDEF";
    var buf: [4]u8 = undefined;

    var out = std.ArrayList(u8).init(allocator);
    defer out.deinit();
    var writer = out.writer();

    try writer.writeByte('"');

    buf[0] = '\\';
    buf[1] = 'x';

    for (str) |c| {
        if (c == '"') {
            try writer.writeByte('\\');
            try writer.writeByte('"');
        } else if (c == '\\') {
            try writer.writeByte('\\');
            try writer.writeByte('\\');
        } else if (std.ascii.isPrint(c)) {
            try writer.writeByte(c);
        } else {
            buf[2] = charset[c >> 4];
            buf[3] = charset[c & 15];
            try writer.writeAll(&buf);
        }
    }
    try writer.writeByte('"');
    return out.toOwnedSlice();
}
