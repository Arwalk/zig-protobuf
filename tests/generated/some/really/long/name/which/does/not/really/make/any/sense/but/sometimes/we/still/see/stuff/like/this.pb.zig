// Code generated by protoc-gen-zig
///! package some.really.long.name.which.does.not.really.make.any.sense.but.sometimes.we.still.see.stuff.like.this
const std = @import("std");

const protobuf = @import("protobuf");
const fd = protobuf.fd;

pub const WouldYouParseThisForMePlease = struct {
    field: ?Test = null,

    pub const _desc_table = .{
        .field = fd(1, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: std.io.AnyWriter,
        allocator: std.mem.Allocator,
    ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
        return protobuf.encode(writer, allocator, self);
    }

    pub fn decode(
        input: []const u8,
        allocator: std.mem.Allocator,
    ) (protobuf.DecodingError || std.io.AnyReader.Error || std.mem.Allocator.Error)!@This() {
        return protobuf.decode(@This(), input, allocator);
    }

    pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.init(@This(), allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return protobuf.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.StringifyOptions,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return protobuf.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return protobuf.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.json.stringify(@This(), self, jws);
    }
};

pub const Test = struct {
    field: []const u8 = &.{},

    pub const _desc_table = .{
        .field = fd(1, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: std.io.AnyWriter,
        allocator: std.mem.Allocator,
    ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
        return protobuf.encode(writer, allocator, self);
    }

    pub fn decode(
        input: []const u8,
        allocator: std.mem.Allocator,
    ) (protobuf.DecodingError || std.io.AnyReader.Error || std.mem.Allocator.Error)!@This() {
        return protobuf.decode(@This(), input, allocator);
    }

    pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.init(@This(), allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return protobuf.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.StringifyOptions,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return protobuf.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return protobuf.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.json.stringify(@This(), self, jws);
    }
};
