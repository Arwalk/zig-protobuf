// Code generated by protoc-gen-zig
///! package vector_tile
const std = @import("std");

const protobuf = @import("protobuf");
const fd = protobuf.fd;

pub const Tile = struct {
    layers: std.ArrayListUnmanaged(Tile.Layer),

    pub const _desc_table = .{
        .layers = fd(3, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const GeomType = enum(i32) {
        UNKNOWN = 0,
        POINT = 1,
        LINESTRING = 2,
        POLYGON = 3,
        _,
    };

    pub const Value = struct {
        string_value: ?[]const u8 = null,
        float_value: ?f32 = null,
        double_value: ?f64 = null,
        int_value: ?i64 = null,
        uint_value: ?u64 = null,
        sint_value: ?i64 = null,
        bool_value: ?bool = null,

        pub const _desc_table = .{
            .string_value = fd(1, .String),
            .float_value = fd(2, .{ .FixedInt = .I32 }),
            .double_value = fd(3, .{ .FixedInt = .I64 }),
            .int_value = fd(4, .{ .Varint = .Simple }),
            .uint_value = fd(5, .{ .Varint = .Simple }),
            .sint_value = fd(6, .{ .Varint = .ZigZagOptimized }),
            .bool_value = fd(7, .{ .Varint = .Simple }),
        };

        pub fn encode(
            self: @This(),
            writer: std.io.AnyWriter,
            allocator: std.mem.Allocator,
        ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
            return protobuf.pb_encode(writer, allocator, self);
        }
        pub fn decode(
            input: []const u8,
            allocator: std.mem.Allocator,
        ) (protobuf.DecodingError || std.mem.Allocator.Error)!@This() {
            return protobuf.pb_decode(@This(), input, allocator);
        }
        pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return protobuf.pb_init(@This(), allocator);
        }
        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return protobuf.pb_deinit(allocator, self);
        }
        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return protobuf.pb_dupe(@This(), self, allocator);
        }
        pub fn json_decode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return protobuf.pb_json_decode(@This(), input, options, allocator);
        }
        pub fn json_encode(
            self: @This(),
            options: std.json.StringifyOptions,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return protobuf.pb_json_encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return protobuf.pb_json_parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return protobuf.pb_jsonStringify(@This(), self, jws);
        }
    };

    pub const Feature = struct {
        id: ?u64 = 0,
        tags: std.ArrayListUnmanaged(u32),
        type: ?Tile.GeomType = .UNKNOWN,
        geometry: std.ArrayListUnmanaged(u32),

        pub const _desc_table = .{
            .id = fd(1, .{ .Varint = .Simple }),
            .tags = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
            .type = fd(3, .{ .Varint = .Simple }),
            .geometry = fd(4, .{ .PackedList = .{ .Varint = .Simple } }),
        };

        pub fn encode(
            self: @This(),
            writer: std.io.AnyWriter,
            allocator: std.mem.Allocator,
        ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
            return protobuf.pb_encode(writer, allocator, self);
        }
        pub fn decode(
            input: []const u8,
            allocator: std.mem.Allocator,
        ) (protobuf.DecodingError || std.mem.Allocator.Error)!@This() {
            return protobuf.pb_decode(@This(), input, allocator);
        }
        pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return protobuf.pb_init(@This(), allocator);
        }
        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return protobuf.pb_deinit(allocator, self);
        }
        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return protobuf.pb_dupe(@This(), self, allocator);
        }
        pub fn json_decode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return protobuf.pb_json_decode(@This(), input, options, allocator);
        }
        pub fn json_encode(
            self: @This(),
            options: std.json.StringifyOptions,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return protobuf.pb_json_encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return protobuf.pb_json_parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return protobuf.pb_jsonStringify(@This(), self, jws);
        }
    };

    pub const Layer = struct {
        version: u32 = 1,
        name: []const u8,
        features: std.ArrayListUnmanaged(Tile.Feature),
        keys: std.ArrayListUnmanaged([]const u8),
        values: std.ArrayListUnmanaged(Tile.Value),
        extent: ?u32 = 4096,

        pub const _desc_table = .{
            .version = fd(15, .{ .Varint = .Simple }),
            .name = fd(1, .String),
            .features = fd(2, .{ .List = .{ .SubMessage = {} } }),
            .keys = fd(3, .{ .List = .String }),
            .values = fd(4, .{ .List = .{ .SubMessage = {} } }),
            .extent = fd(5, .{ .Varint = .Simple }),
        };

        pub fn encode(
            self: @This(),
            writer: std.io.AnyWriter,
            allocator: std.mem.Allocator,
        ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
            return protobuf.pb_encode(writer, allocator, self);
        }
        pub fn decode(
            input: []const u8,
            allocator: std.mem.Allocator,
        ) (protobuf.DecodingError || std.mem.Allocator.Error)!@This() {
            return protobuf.pb_decode(@This(), input, allocator);
        }
        pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return protobuf.pb_init(@This(), allocator);
        }
        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return protobuf.pb_deinit(allocator, self);
        }
        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return protobuf.pb_dupe(@This(), self, allocator);
        }
        pub fn json_decode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return protobuf.pb_json_decode(@This(), input, options, allocator);
        }
        pub fn json_encode(
            self: @This(),
            options: std.json.StringifyOptions,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return protobuf.pb_json_encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return protobuf.pb_json_parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return protobuf.pb_jsonStringify(@This(), self, jws);
        }
    };

    pub fn encode(
        self: @This(),
        writer: std.io.AnyWriter,
        allocator: std.mem.Allocator,
    ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(
        input: []const u8,
        allocator: std.mem.Allocator,
    ) (protobuf.DecodingError || std.mem.Allocator.Error)!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: std.json.StringifyOptions,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};
