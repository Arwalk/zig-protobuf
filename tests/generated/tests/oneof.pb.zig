// Code generated by protoc-gen-zig
///! package tests.oneof
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
const ManagedStruct = protobuf.ManagedStruct;
const json = protobuf.json;
const UnionDecodingError = protobuf.UnionDecodingError;

pub const Enum = enum(i32) {
    UNSPECIFIED = 0,
    SOMETHING = 1,
    SOMETHING2 = 2,
    _,
};

pub const Message = struct {
    value: i32 = 0,
    str: ManagedString = .Empty,

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
        .str = fd(2, .String),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) @This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This()) void {
        return protobuf.pb_deinit(self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const OneofContainer = struct {
    regular_field: ManagedString = .Empty,
    enum_field: Enum = @enumFromInt(0),
    some_oneof: ?some_oneof_union,

    pub const _some_oneof_case = enum {
        string_in_oneof,
        message_in_oneof,
        a_number,
        enum_value,
    };
    pub const some_oneof_union = union(_some_oneof_case) {
        string_in_oneof: ManagedString,
        message_in_oneof: Message,
        a_number: i32,
        enum_value: Enum,
        pub const _union_desc = .{
            .string_in_oneof = fd(1, .String),
            .message_in_oneof = fd(2, .{ .SubMessage = {} }),
            .a_number = fd(3, .{ .Varint = .Simple }),
            .enum_value = fd(6, .{ .Varint = .Simple }),
        };
    };

    pub const _desc_table = .{
        .regular_field = fd(4, .String),
        .enum_field = fd(5, .{ .Varint = .Simple }),
        .some_oneof = fd(null, .{ .OneOf = some_oneof_union }),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) @This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This()) void {
        return protobuf.pb_deinit(self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};
