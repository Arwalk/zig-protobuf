// Code generated by protoc-gen-zig
///! package opentelemetry.proto.common.v1
const std = @import("std");

const protobuf = @import("protobuf");
const fd = protobuf.fd;

pub const AnyValue = struct {
    value: ?value_union,

    pub const _value_case = enum {
        string_value,
        bool_value,
        int_value,
        double_value,
        array_value,
        kvlist_value,
        bytes_value,
    };
    pub const value_union = union(_value_case) {
        string_value: []const u8,
        bool_value: bool,
        int_value: i64,
        double_value: f64,
        array_value: ArrayValue,
        kvlist_value: KeyValueList,
        bytes_value: []const u8,
        pub const _desc_table = .{
            .string_value = fd(1, .{ .scalar = .string }),
            .bool_value = fd(2, .{ .scalar = .bool }),
            .int_value = fd(3, .{ .scalar = .int64 }),
            .double_value = fd(4, .{ .scalar = .double }),
            .array_value = fd(5, .submessage),
            .kvlist_value = fd(6, .submessage),
            .bytes_value = fd(7, .{ .scalar = .bytes }),
        };
    };

    pub const _desc_table = .{
        .value = fd(null, .{ .oneof = value_union }),
    };

    pub fn encode(
        self: @This(),
        writer: std.io.AnyWriter,
        allocator: std.mem.Allocator,
    ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
        return protobuf.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: std.io.AnyReader,
        allocator: std.mem.Allocator,
    ) (protobuf.DecodingError || std.io.AnyReader.Error || std.mem.Allocator.Error)!@This() {
        return protobuf.decode(@This(), reader, allocator);
    }

    pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.init(@This(), allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return protobuf.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.StringifyOptions,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return protobuf.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return protobuf.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.json.stringify(@This(), self, jws);
    }
};

pub const ArrayValue = struct {
    values: std.ArrayListUnmanaged(AnyValue) = .empty,

    pub const _desc_table = .{
        .values = fd(1, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: std.io.AnyWriter,
        allocator: std.mem.Allocator,
    ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
        return protobuf.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: std.io.AnyReader,
        allocator: std.mem.Allocator,
    ) (protobuf.DecodingError || std.io.AnyReader.Error || std.mem.Allocator.Error)!@This() {
        return protobuf.decode(@This(), reader, allocator);
    }

    pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.init(@This(), allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return protobuf.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.StringifyOptions,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return protobuf.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return protobuf.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.json.stringify(@This(), self, jws);
    }
};

pub const KeyValueList = struct {
    values: std.ArrayListUnmanaged(KeyValue) = .empty,

    pub const _desc_table = .{
        .values = fd(1, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: std.io.AnyWriter,
        allocator: std.mem.Allocator,
    ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
        return protobuf.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: std.io.AnyReader,
        allocator: std.mem.Allocator,
    ) (protobuf.DecodingError || std.io.AnyReader.Error || std.mem.Allocator.Error)!@This() {
        return protobuf.decode(@This(), reader, allocator);
    }

    pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.init(@This(), allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return protobuf.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.StringifyOptions,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return protobuf.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return protobuf.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.json.stringify(@This(), self, jws);
    }
};

pub const KeyValue = struct {
    key: []const u8 = &.{},
    value: ?AnyValue = null,

    pub const _desc_table = .{
        .key = fd(1, .{ .scalar = .string }),
        .value = fd(2, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: std.io.AnyWriter,
        allocator: std.mem.Allocator,
    ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
        return protobuf.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: std.io.AnyReader,
        allocator: std.mem.Allocator,
    ) (protobuf.DecodingError || std.io.AnyReader.Error || std.mem.Allocator.Error)!@This() {
        return protobuf.decode(@This(), reader, allocator);
    }

    pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.init(@This(), allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return protobuf.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.StringifyOptions,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return protobuf.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return protobuf.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.json.stringify(@This(), self, jws);
    }
};

pub const InstrumentationScope = struct {
    name: []const u8 = &.{},
    version: []const u8 = &.{},
    attributes: std.ArrayListUnmanaged(KeyValue) = .empty,
    dropped_attributes_count: u32 = 0,

    pub const _desc_table = .{
        .name = fd(1, .{ .scalar = .string }),
        .version = fd(2, .{ .scalar = .string }),
        .attributes = fd(3, .{ .repeated = .submessage }),
        .dropped_attributes_count = fd(4, .{ .scalar = .uint32 }),
    };

    pub fn encode(
        self: @This(),
        writer: std.io.AnyWriter,
        allocator: std.mem.Allocator,
    ) (std.io.AnyWriter.Error || std.mem.Allocator.Error)!void {
        return protobuf.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: std.io.AnyReader,
        allocator: std.mem.Allocator,
    ) (protobuf.DecodingError || std.io.AnyReader.Error || std.mem.Allocator.Error)!@This() {
        return protobuf.decode(@This(), reader, allocator);
    }

    pub fn init(allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.init(@This(), allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return protobuf.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return protobuf.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.StringifyOptions,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return protobuf.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return protobuf.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.json.stringify(@This(), self, jws);
    }
};
