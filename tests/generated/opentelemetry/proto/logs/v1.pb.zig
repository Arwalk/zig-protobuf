// Code generated by protoc-gen-zig
///! package opentelemetry.proto.logs.v1
const std = @import("std");

const pb = @import("protobuf");
const fd = pb.fd;
/// import package opentelemetry.proto.common.v1
const opentelemetry_proto_common_v1 = @import("../common/v1.pb.zig");
/// import package opentelemetry.proto.resource.v1
const opentelemetry_proto_resource_v1 = @import("../resource/v1.pb.zig");

pub const SeverityNumber = enum(i32) {
    SEVERITY_NUMBER_UNSPECIFIED = 0,
    SEVERITY_NUMBER_TRACE = 1,
    SEVERITY_NUMBER_TRACE2 = 2,
    SEVERITY_NUMBER_TRACE3 = 3,
    SEVERITY_NUMBER_TRACE4 = 4,
    SEVERITY_NUMBER_DEBUG = 5,
    SEVERITY_NUMBER_DEBUG2 = 6,
    SEVERITY_NUMBER_DEBUG3 = 7,
    SEVERITY_NUMBER_DEBUG4 = 8,
    SEVERITY_NUMBER_INFO = 9,
    SEVERITY_NUMBER_INFO2 = 10,
    SEVERITY_NUMBER_INFO3 = 11,
    SEVERITY_NUMBER_INFO4 = 12,
    SEVERITY_NUMBER_WARN = 13,
    SEVERITY_NUMBER_WARN2 = 14,
    SEVERITY_NUMBER_WARN3 = 15,
    SEVERITY_NUMBER_WARN4 = 16,
    SEVERITY_NUMBER_ERROR = 17,
    SEVERITY_NUMBER_ERROR2 = 18,
    SEVERITY_NUMBER_ERROR3 = 19,
    SEVERITY_NUMBER_ERROR4 = 20,
    SEVERITY_NUMBER_FATAL = 21,
    SEVERITY_NUMBER_FATAL2 = 22,
    SEVERITY_NUMBER_FATAL3 = 23,
    SEVERITY_NUMBER_FATAL4 = 24,
    _,
};

pub const LogRecordFlags = enum(i32) {
    LOG_RECORD_FLAGS_DO_NOT_USE = 0,
    LOG_RECORD_FLAGS_TRACE_FLAGS_MASK = 255,
    _,
};

pub const LogsData = struct {
    resource_logs: std.ArrayListUnmanaged(ResourceLogs) = .empty,

    pub const _desc_table = .{
        .resource_logs = fd(1, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ResourceLogs = struct {
    resource: ?opentelemetry_proto_resource_v1.Resource = null,
    scope_logs: std.ArrayListUnmanaged(ScopeLogs) = .empty,
    schema_url: []const u8 = &.{},

    pub const _desc_table = .{
        .resource = fd(1, .submessage),
        .scope_logs = fd(2, .{ .repeated = .submessage }),
        .schema_url = fd(3, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ScopeLogs = struct {
    scope: ?opentelemetry_proto_common_v1.InstrumentationScope = null,
    log_records: std.ArrayListUnmanaged(LogRecord) = .empty,
    schema_url: []const u8 = &.{},

    pub const _desc_table = .{
        .scope = fd(1, .submessage),
        .log_records = fd(2, .{ .repeated = .submessage }),
        .schema_url = fd(3, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const LogRecord = struct {
    time_unix_nano: u64 = 0,
    observed_time_unix_nano: u64 = 0,
    severity_number: SeverityNumber = @enumFromInt(0),
    severity_text: []const u8 = &.{},
    body: ?opentelemetry_proto_common_v1.AnyValue = null,
    attributes: std.ArrayListUnmanaged(opentelemetry_proto_common_v1.KeyValue) = .empty,
    dropped_attributes_count: u32 = 0,
    flags: u32 = 0,
    trace_id: []const u8 = &.{},
    span_id: []const u8 = &.{},

    pub const _desc_table = .{
        .time_unix_nano = fd(1, .{ .scalar = .fixed64 }),
        .observed_time_unix_nano = fd(11, .{ .scalar = .fixed64 }),
        .severity_number = fd(2, .@"enum"),
        .severity_text = fd(3, .{ .scalar = .string }),
        .body = fd(5, .submessage),
        .attributes = fd(6, .{ .repeated = .submessage }),
        .dropped_attributes_count = fd(7, .{ .scalar = .uint32 }),
        .flags = fd(8, .{ .scalar = .fixed32 }),
        .trace_id = fd(9, .{ .scalar = .bytes }),
        .span_id = fd(10, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};
