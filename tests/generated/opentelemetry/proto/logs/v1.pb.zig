// Code generated by protoc-gen-zig
///! package opentelemetry.proto.logs.v1
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
const ManagedStruct = protobuf.ManagedStruct;
const json = protobuf.json;
const UnionDecodingError = protobuf.UnionDecodingError;
/// import package opentelemetry.proto.common.v1
const opentelemetry_proto_common_v1 = @import("../common/v1.pb.zig");
/// import package opentelemetry.proto.resource.v1
const opentelemetry_proto_resource_v1 = @import("../resource/v1.pb.zig");

// Possible values for LogRecord.SeverityNumber.
pub const SeverityNumber = enum(i32) {
    // UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.
    SEVERITY_NUMBER_UNSPECIFIED = 0,
    SEVERITY_NUMBER_TRACE = 1,
    SEVERITY_NUMBER_TRACE2 = 2,
    SEVERITY_NUMBER_TRACE3 = 3,
    SEVERITY_NUMBER_TRACE4 = 4,
    SEVERITY_NUMBER_DEBUG = 5,
    SEVERITY_NUMBER_DEBUG2 = 6,
    SEVERITY_NUMBER_DEBUG3 = 7,
    SEVERITY_NUMBER_DEBUG4 = 8,
    SEVERITY_NUMBER_INFO = 9,
    SEVERITY_NUMBER_INFO2 = 10,
    SEVERITY_NUMBER_INFO3 = 11,
    SEVERITY_NUMBER_INFO4 = 12,
    SEVERITY_NUMBER_WARN = 13,
    SEVERITY_NUMBER_WARN2 = 14,
    SEVERITY_NUMBER_WARN3 = 15,
    SEVERITY_NUMBER_WARN4 = 16,
    SEVERITY_NUMBER_ERROR = 17,
    SEVERITY_NUMBER_ERROR2 = 18,
    SEVERITY_NUMBER_ERROR3 = 19,
    SEVERITY_NUMBER_ERROR4 = 20,
    SEVERITY_NUMBER_FATAL = 21,
    SEVERITY_NUMBER_FATAL2 = 22,
    SEVERITY_NUMBER_FATAL3 = 23,
    SEVERITY_NUMBER_FATAL4 = 24,
    _,
};

// LogRecordFlags represents constants used to interpret the
// LogRecord.flags field, which is protobuf 'fixed32' type and is to
// be used as bit-fields. Each non-zero value defined in this enum is
// a bit-mask.  To extract the bit-field, for example, use an
// expression like:
//
//   (logRecord.flags & LOG_RECORD_FLAGS_TRACE_FLAGS_MASK)
pub const LogRecordFlags = enum(i32) {
    // The zero value for the enum. Should not be used for comparisons.
    // Instead use bitwise "and" with the appropriate mask as shown above.
    LOG_RECORD_FLAGS_DO_NOT_USE = 0,
    // Bits 0-7 are used for trace flags.
    LOG_RECORD_FLAGS_TRACE_FLAGS_MASK = 255,
    _,
};

// LogsData represents the logs data that can be stored in a persistent storage,
// OR can be embedded by other protocols that transfer OTLP logs data but do not
// implement the OTLP protocol.
//
// The main difference between this message and collector protocol is that
// in this message there will not be any "control" or "metadata" specific to
// OTLP protocol.
//
// When new fields are added into this message, the OTLP request MUST be updated
// as well.
pub const LogsData = struct {
    // An array of ResourceLogs.
    // For data coming from a single resource this array will typically contain
    // one element. Intermediary nodes that receive data from multiple origins
    // typically batch the data before forwarding further and in that case this
    // array will contain multiple elements.
    resource_logs: ArrayList(ResourceLogs),

    pub const _desc_table = .{
        .resource_logs = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub fn encode(self: @This(), allocator: Allocator) Allocator.Error![]u8 {
        return protobuf.pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) @This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This()) void {
        return protobuf.pb_deinit(self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.Stringify.Options,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

// A collection of ScopeLogs from a Resource.
pub const ResourceLogs = struct {
    // The resource for the logs in this message.
    // If this field is not set then resource info is unknown.
    resource: ?opentelemetry_proto_resource_v1.Resource = null,
    // A list of ScopeLogs that originate from a resource.
    scope_logs: ArrayList(ScopeLogs),
    // The Schema URL, if known. This is the identifier of the Schema that the resource data
    // is recorded in. To learn more about Schema URL see
    // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
    // This schema_url applies to the data in the "resource" field. It does not apply
    // to the data in the "scope_logs" field which have their own schema_url field.
    schema_url: ManagedString = .Empty,

    pub const _desc_table = .{
        .resource = fd(1, .{ .SubMessage = {} }),
        .scope_logs = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .schema_url = fd(3, .String),
    };

    pub fn encode(self: @This(), allocator: Allocator) Allocator.Error![]u8 {
        return protobuf.pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) @This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This()) void {
        return protobuf.pb_deinit(self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.Stringify.Options,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

// A collection of Logs produced by a Scope.
pub const ScopeLogs = struct {
    // The instrumentation scope information for the logs in this message.
    // Semantically when InstrumentationScope isn't set, it is equivalent with
    // an empty instrumentation scope name (unknown).
    scope: ?opentelemetry_proto_common_v1.InstrumentationScope = null,
    // A list of log records.
    log_records: ArrayList(LogRecord),
    // The Schema URL, if known. This is the identifier of the Schema that the log data
    // is recorded in. To learn more about Schema URL see
    // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
    // This schema_url applies to all logs in the "logs" field.
    schema_url: ManagedString = .Empty,

    pub const _desc_table = .{
        .scope = fd(1, .{ .SubMessage = {} }),
        .log_records = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .schema_url = fd(3, .String),
    };

    pub fn encode(self: @This(), allocator: Allocator) Allocator.Error![]u8 {
        return protobuf.pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) @This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This()) void {
        return protobuf.pb_deinit(self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.Stringify.Options,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

// A log record according to OpenTelemetry Log Data Model:
// https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md
pub const LogRecord = struct {
    // time_unix_nano is the time when the event occurred.
    // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
    // Value of 0 indicates unknown or missing timestamp.
    time_unix_nano: u64 = 0,
    // Time when the event was observed by the collection system.
    // For events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK)
    // this timestamp is typically set at the generation time and is equal to Timestamp.
    // For events originating externally and collected by OpenTelemetry (e.g. using
    // Collector) this is the time when OpenTelemetry's code observed the event measured
    // by the clock of the OpenTelemetry code. This field MUST be set once the event is
    // observed by OpenTelemetry.
    //
    // For converting OpenTelemetry log data to formats that support only one timestamp or
    // when receiving OpenTelemetry log data by recipients that support only one timestamp
    // internally the following logic is recommended:
    //   - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano.
    //
    // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
    // Value of 0 indicates unknown or missing timestamp.
    observed_time_unix_nano: u64 = 0,
    // Numerical value of the severity, normalized to values described in Log Data Model.
    // [Optional].
    severity_number: SeverityNumber = @enumFromInt(0),
    // The severity text (also known as log level). The original string representation as
    // it is known at the source. [Optional].
    severity_text: ManagedString = .Empty,
    // A value containing the body of the log record. Can be for example a human-readable
    // string message (including multi-line) describing the event in a free form or it can
    // be a structured data composed of arrays and maps of other values. [Optional].
    body: ?opentelemetry_proto_common_v1.AnyValue = null,
    // Additional attributes that describe the specific event occurrence. [Optional].
    // Attribute keys MUST be unique (it is not allowed to have more than one
    // attribute with the same key).
    attributes: ArrayList(opentelemetry_proto_common_v1.KeyValue),
    dropped_attributes_count: u32 = 0,
    // Flags, a bit field. 8 least significant bits are the trace flags as
    // defined in W3C Trace Context specification. 24 most significant bits are reserved
    // and must be set to 0. Readers must not assume that 24 most significant bits
    // will be zero and must correctly mask the bits when reading 8-bit trace flag (use
    // flags & LOG_RECORD_FLAGS_TRACE_FLAGS_MASK). [Optional].
    flags: u32 = 0,
    // A unique identifier for a trace. All logs from the same trace share
    // the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR
    // of length other than 16 bytes is considered invalid (empty string in OTLP/JSON
    // is zero-length and thus is also invalid).
    //
    // This field is optional.
    //
    // The receivers SHOULD assume that the log record is not associated with a
    // trace if any of the following is true:
    //   - the field is not present,
    //   - the field contains an invalid value.
    trace_id: ManagedString = .Empty,
    // A unique identifier for a span within a trace, assigned when the span
    // is created. The ID is an 8-byte array. An ID with all zeroes OR of length
    // other than 8 bytes is considered invalid (empty string in OTLP/JSON
    // is zero-length and thus is also invalid).
    //
    // This field is optional. If the sender specifies a valid span_id then it SHOULD also
    // specify a valid trace_id.
    //
    // The receivers SHOULD assume that the log record is not associated with a
    // span if any of the following is true:
    //   - the field is not present,
    //   - the field contains an invalid value.
    span_id: ManagedString = .Empty,

    pub const _desc_table = .{
        .time_unix_nano = fd(1, .{ .FixedInt = .I64 }),
        .observed_time_unix_nano = fd(11, .{ .FixedInt = .I64 }),
        .severity_number = fd(2, .{ .Varint = .Simple }),
        .severity_text = fd(3, .String),
        .body = fd(5, .{ .SubMessage = {} }),
        .attributes = fd(6, .{ .List = .{ .SubMessage = {} } }),
        .dropped_attributes_count = fd(7, .{ .Varint = .Simple }),
        .flags = fd(8, .{ .FixedInt = .I32 }),
        .trace_id = fd(9, .Bytes),
        .span_id = fd(10, .Bytes),
    };

    pub fn encode(self: @This(), allocator: Allocator) Allocator.Error![]u8 {
        return protobuf.pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) @This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This()) void {
        return protobuf.pb_deinit(self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.Stringify.Options,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};
