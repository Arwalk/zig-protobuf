// Code generated by protoc-gen-zig
///! package unittest
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const ForeignEnum = enum(i32) {
    FOREIGN_FOO = 4,
    FOREIGN_BAR = 5,
    FOREIGN_BAZ = 6,
    _,
};

pub const TestReservedEnumFields = enum(i32) {
    UNKNOWN = 0,
    _,
};

pub const TestEnumWithDupValue = enum(i32) {
    FOO1 = 1,
    BAR1 = 2,
    BAZ = 3,
    FOO2 = 1,
    BAR2 = 2,
    _,
};

pub const TestSparseEnum = enum(i32) {
    SPARSE_A = 123,
    SPARSE_B = 62374,
    SPARSE_C = 12589234,
    SPARSE_D = -15,
    SPARSE_E = -53452,
    SPARSE_F = 0,
    SPARSE_G = 2,
    _,
};

pub const VeryLargeEnum = enum(i32) {
    ENUM_LABEL_DEFAULT = 0,
    ENUM_LABEL_1 = 1,
    ENUM_LABEL_2 = 2,
    ENUM_LABEL_3 = 3,
    ENUM_LABEL_4 = 4,
    ENUM_LABEL_5 = 5,
    ENUM_LABEL_6 = 6,
    ENUM_LABEL_7 = 7,
    ENUM_LABEL_8 = 8,
    ENUM_LABEL_9 = 9,
    ENUM_LABEL_10 = 10,
    ENUM_LABEL_11 = 11,
    ENUM_LABEL_12 = 12,
    ENUM_LABEL_13 = 13,
    ENUM_LABEL_14 = 14,
    ENUM_LABEL_15 = 15,
    ENUM_LABEL_16 = 16,
    ENUM_LABEL_17 = 17,
    ENUM_LABEL_18 = 18,
    ENUM_LABEL_19 = 19,
    ENUM_LABEL_20 = 20,
    ENUM_LABEL_21 = 21,
    ENUM_LABEL_22 = 22,
    ENUM_LABEL_23 = 23,
    ENUM_LABEL_24 = 24,
    ENUM_LABEL_25 = 25,
    ENUM_LABEL_26 = 26,
    ENUM_LABEL_27 = 27,
    ENUM_LABEL_28 = 28,
    ENUM_LABEL_29 = 29,
    ENUM_LABEL_30 = 30,
    ENUM_LABEL_31 = 31,
    ENUM_LABEL_32 = 32,
    ENUM_LABEL_33 = 33,
    ENUM_LABEL_34 = 34,
    ENUM_LABEL_35 = 35,
    ENUM_LABEL_36 = 36,
    ENUM_LABEL_37 = 37,
    ENUM_LABEL_38 = 38,
    ENUM_LABEL_39 = 39,
    ENUM_LABEL_40 = 40,
    ENUM_LABEL_41 = 41,
    ENUM_LABEL_42 = 42,
    ENUM_LABEL_43 = 43,
    ENUM_LABEL_44 = 44,
    ENUM_LABEL_45 = 45,
    ENUM_LABEL_46 = 46,
    ENUM_LABEL_47 = 47,
    ENUM_LABEL_48 = 48,
    ENUM_LABEL_49 = 49,
    ENUM_LABEL_50 = 50,
    ENUM_LABEL_51 = 51,
    ENUM_LABEL_52 = 52,
    ENUM_LABEL_53 = 53,
    ENUM_LABEL_54 = 54,
    ENUM_LABEL_55 = 55,
    ENUM_LABEL_56 = 56,
    ENUM_LABEL_57 = 57,
    ENUM_LABEL_58 = 58,
    ENUM_LABEL_59 = 59,
    ENUM_LABEL_60 = 60,
    ENUM_LABEL_61 = 61,
    ENUM_LABEL_62 = 62,
    ENUM_LABEL_63 = 63,
    ENUM_LABEL_64 = 64,
    ENUM_LABEL_65 = 65,
    ENUM_LABEL_66 = 66,
    ENUM_LABEL_67 = 67,
    ENUM_LABEL_68 = 68,
    ENUM_LABEL_69 = 69,
    ENUM_LABEL_70 = 70,
    ENUM_LABEL_71 = 71,
    ENUM_LABEL_72 = 72,
    ENUM_LABEL_73 = 73,
    ENUM_LABEL_74 = 74,
    ENUM_LABEL_75 = 75,
    ENUM_LABEL_76 = 76,
    ENUM_LABEL_77 = 77,
    ENUM_LABEL_78 = 78,
    ENUM_LABEL_79 = 79,
    ENUM_LABEL_80 = 80,
    ENUM_LABEL_81 = 81,
    ENUM_LABEL_82 = 82,
    ENUM_LABEL_83 = 83,
    ENUM_LABEL_84 = 84,
    ENUM_LABEL_85 = 85,
    ENUM_LABEL_86 = 86,
    ENUM_LABEL_87 = 87,
    ENUM_LABEL_88 = 88,
    ENUM_LABEL_89 = 89,
    ENUM_LABEL_90 = 90,
    ENUM_LABEL_91 = 91,
    ENUM_LABEL_92 = 92,
    ENUM_LABEL_93 = 93,
    ENUM_LABEL_94 = 94,
    ENUM_LABEL_95 = 95,
    ENUM_LABEL_96 = 96,
    ENUM_LABEL_97 = 97,
    ENUM_LABEL_98 = 98,
    ENUM_LABEL_99 = 99,
    ENUM_LABEL_100 = 100,
    _,
};

pub const TestAllTypes = struct {
    optional_int32: ?i32 = null,
    optional_int64: ?i64 = null,
    optional_uint32: ?u32 = null,
    optional_uint64: ?u64 = null,
    optional_sint32: ?i32 = null,
    optional_sint64: ?i64 = null,
    optional_fixed32: ?u32 = null,
    optional_fixed64: ?u64 = null,
    optional_sfixed32: ?i32 = null,
    optional_sfixed64: ?i64 = null,
    optional_float: ?f32 = null,
    optional_double: ?f64 = null,
    optional_bool: ?bool = null,
    optional_string: ?ManagedString = null,
    optional_bytes: ?ManagedString = null,
    a: ?i32 = null,
    optional_nested_message: ?NestedMessage = null,
    optional_foreign_message: ?ForeignMessage = null,
    optional_nested_enum: ?NestedEnum = null,
    optional_foreign_enum: ?ForeignEnum = null,
    optional_string_piece: ?ManagedString = null,
    optional_cord: ?ManagedString = null,
    optional_lazy_message: ?NestedMessage = null,
    repeated_int32: ArrayList(i32),
    repeated_int64: ArrayList(i64),
    repeated_uint32: ArrayList(u32),
    repeated_uint64: ArrayList(u64),
    repeated_sint32: ArrayList(i32),
    repeated_sint64: ArrayList(i64),
    repeated_fixed32: ArrayList(u32),
    repeated_fixed64: ArrayList(u64),
    repeated_sfixed32: ArrayList(i32),
    repeated_sfixed64: ArrayList(i64),
    repeated_float: ArrayList(f32),
    repeated_double: ArrayList(f64),
    repeated_bool: ArrayList(bool),
    repeated_string: ArrayList(ManagedString),
    repeated_bytes: ArrayList(ManagedString),
    RepeatedGroup_a: ArrayList(i32),
    repeated_nested_message: ArrayList(NestedMessage),
    repeated_foreign_message: ArrayList(ForeignMessage),
    repeated_nested_enum: ArrayList(NestedEnum),
    repeated_foreign_enum: ArrayList(ForeignEnum),
    repeated_string_piece: ArrayList(ManagedString),
    repeated_cord: ArrayList(ManagedString),
    repeated_lazy_message: ArrayList(NestedMessage),
    default_int32: ?i32 = 41,
    default_int64: ?i64 = 42,
    default_uint32: ?u32 = 43,
    default_uint64: ?u64 = 44,
    default_sint32: ?i32 = -45,
    default_sint64: ?i64 = 46,
    default_fixed32: ?u32 = 47,
    default_fixed64: ?u64 = 48,
    default_sfixed32: ?i32 = 49,
    default_sfixed64: ?i64 = -50,
    default_float: ?f32 = 51.5,
    default_double: ?f64 = 52000,
    default_bool: ?bool = true,
    default_string: ?ManagedString = ManagedString.static("hello"),
    default_bytes: ?ManagedString = ManagedString.static("world"),
    default_nested_enum: ?NestedEnum = .BAR,
    default_foreign_enum: ?ForeignEnum = .FOREIGN_BAR,
    default_string_piece: ?ManagedString = ManagedString.static("abc"),
    default_cord: ?ManagedString = ManagedString.static("123"),
    oneof_field: ?oneof_field_union,

    pub const _oneof_field_case = enum {
        oneof_uint32,
        oneof_nested_message,
        oneof_string,
        oneof_bytes,
    };
    pub const oneof_field_union = union(_oneof_field_case) {
        oneof_uint32: u32,
        oneof_nested_message: NestedMessage,
        oneof_string: ManagedString,
        oneof_bytes: ManagedString,
        pub const _union_desc = .{
            .oneof_uint32 = fd(111, .{ .Varint = .Simple }),
            .oneof_nested_message = fd(112, .{ .SubMessage = {} }),
            .oneof_string = fd(113, .String),
            .oneof_bytes = fd(114, .Bytes),
        };
    };

    pub const _desc_table = .{
        .optional_int32 = fd(1, .{ .Varint = .Simple }),
        .optional_int64 = fd(2, .{ .Varint = .Simple }),
        .optional_uint32 = fd(3, .{ .Varint = .Simple }),
        .optional_uint64 = fd(4, .{ .Varint = .Simple }),
        .optional_sint32 = fd(5, .{ .Varint = .ZigZagOptimized }),
        .optional_sint64 = fd(6, .{ .Varint = .ZigZagOptimized }),
        .optional_fixed32 = fd(7, .{ .FixedInt = .I32 }),
        .optional_fixed64 = fd(8, .{ .FixedInt = .I64 }),
        .optional_sfixed32 = fd(9, .{ .FixedInt = .I32 }),
        .optional_sfixed64 = fd(10, .{ .FixedInt = .I64 }),
        .optional_float = fd(11, .{ .FixedInt = .I32 }),
        .optional_double = fd(12, .{ .FixedInt = .I64 }),
        .optional_bool = fd(13, .{ .Varint = .Simple }),
        .optional_string = fd(14, .String),
        .optional_bytes = fd(15, .Bytes),
        .a = fd(17, .{ .Varint = .Simple }),
        .optional_nested_message = fd(18, .{ .SubMessage = {} }),
        .optional_foreign_message = fd(19, .{ .SubMessage = {} }),
        .optional_nested_enum = fd(21, .{ .Varint = .Simple }),
        .optional_foreign_enum = fd(22, .{ .Varint = .Simple }),
        .optional_string_piece = fd(24, .String),
        .optional_cord = fd(25, .String),
        .optional_lazy_message = fd(27, .{ .SubMessage = {} }),
        .repeated_int32 = fd(31, .{ .List = .{ .Varint = .Simple } }),
        .repeated_int64 = fd(32, .{ .List = .{ .Varint = .Simple } }),
        .repeated_uint32 = fd(33, .{ .List = .{ .Varint = .Simple } }),
        .repeated_uint64 = fd(34, .{ .List = .{ .Varint = .Simple } }),
        .repeated_sint32 = fd(35, .{ .List = .{ .Varint = .ZigZagOptimized } }),
        .repeated_sint64 = fd(36, .{ .List = .{ .Varint = .ZigZagOptimized } }),
        .repeated_fixed32 = fd(37, .{ .List = .{ .FixedInt = .I32 } }),
        .repeated_fixed64 = fd(38, .{ .List = .{ .FixedInt = .I64 } }),
        .repeated_sfixed32 = fd(39, .{ .List = .{ .FixedInt = .I32 } }),
        .repeated_sfixed64 = fd(40, .{ .List = .{ .FixedInt = .I64 } }),
        .repeated_float = fd(41, .{ .List = .{ .FixedInt = .I32 } }),
        .repeated_double = fd(42, .{ .List = .{ .FixedInt = .I64 } }),
        .repeated_bool = fd(43, .{ .List = .{ .Varint = .Simple } }),
        .repeated_string = fd(44, .{ .List = .String }),
        .repeated_bytes = fd(45, .{ .List = .Bytes }),
        .RepeatedGroup_a = fd(47, .{ .List = .{ .Varint = .Simple } }),
        .repeated_nested_message = fd(48, .{ .List = .{ .SubMessage = {} } }),
        .repeated_foreign_message = fd(49, .{ .List = .{ .SubMessage = {} } }),
        .repeated_nested_enum = fd(51, .{ .List = .{ .Varint = .Simple } }),
        .repeated_foreign_enum = fd(52, .{ .List = .{ .Varint = .Simple } }),
        .repeated_string_piece = fd(54, .{ .List = .String }),
        .repeated_cord = fd(55, .{ .List = .String }),
        .repeated_lazy_message = fd(57, .{ .List = .{ .SubMessage = {} } }),
        .default_int32 = fd(61, .{ .Varint = .Simple }),
        .default_int64 = fd(62, .{ .Varint = .Simple }),
        .default_uint32 = fd(63, .{ .Varint = .Simple }),
        .default_uint64 = fd(64, .{ .Varint = .Simple }),
        .default_sint32 = fd(65, .{ .Varint = .ZigZagOptimized }),
        .default_sint64 = fd(66, .{ .Varint = .ZigZagOptimized }),
        .default_fixed32 = fd(67, .{ .FixedInt = .I32 }),
        .default_fixed64 = fd(68, .{ .FixedInt = .I64 }),
        .default_sfixed32 = fd(69, .{ .FixedInt = .I32 }),
        .default_sfixed64 = fd(70, .{ .FixedInt = .I64 }),
        .default_float = fd(71, .{ .FixedInt = .I32 }),
        .default_double = fd(72, .{ .FixedInt = .I64 }),
        .default_bool = fd(73, .{ .Varint = .Simple }),
        .default_string = fd(74, .String),
        .default_bytes = fd(75, .Bytes),
        .default_nested_enum = fd(81, .{ .Varint = .Simple }),
        .default_foreign_enum = fd(82, .{ .Varint = .Simple }),
        .default_string_piece = fd(84, .String),
        .default_cord = fd(85, .String),
        .oneof_field = fd(null, .{ .OneOf = oneof_field_union }),
    };

    pub const NestedEnum = enum(i32) {
        FOO = 1,
        BAR = 2,
        BAZ = 3,
        NEG = -1,
        _,
    };

    pub const NestedMessage = struct {
        bb: ?i32 = null,

        pub const _desc_table = .{
            .bb = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NestedTestAllTypes = struct {
    child: ?NestedTestAllTypes = null,
    payload: ?TestAllTypes = null,
    repeated_child: ArrayList(NestedTestAllTypes),
    lazy_child: ?NestedTestAllTypes = null,
    eager_child: ?TestAllTypes = null,

    pub const _desc_table = .{
        .child = fd(1, .{ .SubMessage = {} }),
        .payload = fd(2, .{ .SubMessage = {} }),
        .repeated_child = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .lazy_child = fd(4, .{ .SubMessage = {} }),
        .eager_child = fd(5, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestDeprecatedFields = struct {
    deprecated_int32: ?i32 = null,
    deprecated_int32_in_oneof: ?i32 = null,

    pub const _desc_table = .{
        .deprecated_int32 = fd(1, .{ .Varint = .Simple }),
        .deprecated_int32_in_oneof = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestDeprecatedMessage = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ForeignMessage = struct {
    c: ?i32 = null,
    d: ?i32 = null,

    pub const _desc_table = .{
        .c = fd(1, .{ .Varint = .Simple }),
        .d = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestReservedFields = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestAllExtensions = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestGroup = struct {
    a: ?i32 = null,
    optional_foreign_enum: ?ForeignEnum = null,

    pub const _desc_table = .{
        .a = fd(17, .{ .Varint = .Simple }),
        .optional_foreign_enum = fd(22, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestGroupExtension = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestNestedExtension = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestChildExtension = struct {
    a: ?ManagedString = null,
    b: ?ManagedString = null,
    optional_extension: ?TestAllExtensions = null,

    pub const _desc_table = .{
        .a = fd(1, .String),
        .b = fd(2, .String),
        .optional_extension = fd(3, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestChildExtensionData = struct {
    a: ?ManagedString = null,
    b: ?ManagedString = null,
    optional_extension: ?NestedTestAllExtensionsData = null,

    pub const _desc_table = .{
        .a = fd(1, .String),
        .b = fd(2, .String),
        .optional_extension = fd(3, .{ .SubMessage = {} }),
    };

    pub const NestedTestAllExtensionsData = struct {
        dynamic: ?NestedDynamicExtensions = null,

        pub const _desc_table = .{
            .dynamic = fd(409707008, .{ .SubMessage = {} }),
        };

        pub const NestedDynamicExtensions = struct {
            a: ?i32 = null,
            b: ?i32 = null,

            pub const _desc_table = .{
                .a = fd(1, .{ .Varint = .Simple }),
                .b = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestNestedChildExtension = struct {
    a: ?i32 = null,
    child: ?TestChildExtension = null,

    pub const _desc_table = .{
        .a = fd(1, .{ .Varint = .Simple }),
        .child = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestNestedChildExtensionData = struct {
    a: ?i32 = null,
    child: ?TestChildExtensionData = null,

    pub const _desc_table = .{
        .a = fd(1, .{ .Varint = .Simple }),
        .child = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestRequired = struct {
    a: i32,
    dummy2: ?i32 = null,
    b: i32,
    dummy4: ?i32 = null,
    dummy5: ?i32 = null,
    dummy6: ?i32 = null,
    dummy7: ?i32 = null,
    dummy8: ?i32 = null,
    dummy9: ?i32 = null,
    dummy10: ?i32 = null,
    dummy11: ?i32 = null,
    dummy12: ?i32 = null,
    dummy13: ?i32 = null,
    dummy14: ?i32 = null,
    dummy15: ?i32 = null,
    dummy16: ?i32 = null,
    dummy17: ?i32 = null,
    dummy18: ?i32 = null,
    dummy19: ?i32 = null,
    dummy20: ?i32 = null,
    dummy21: ?i32 = null,
    dummy22: ?i32 = null,
    dummy23: ?i32 = null,
    dummy24: ?i32 = null,
    dummy25: ?i32 = null,
    dummy26: ?i32 = null,
    dummy27: ?i32 = null,
    dummy28: ?i32 = null,
    dummy29: ?i32 = null,
    dummy30: ?i32 = null,
    dummy31: ?i32 = null,
    dummy32: ?i32 = null,
    c: i32,
    optional_foreign: ?ForeignMessage = null,

    pub const _desc_table = .{
        .a = fd(1, .{ .Varint = .Simple }),
        .dummy2 = fd(2, .{ .Varint = .Simple }),
        .b = fd(3, .{ .Varint = .Simple }),
        .dummy4 = fd(4, .{ .Varint = .Simple }),
        .dummy5 = fd(5, .{ .Varint = .Simple }),
        .dummy6 = fd(6, .{ .Varint = .Simple }),
        .dummy7 = fd(7, .{ .Varint = .Simple }),
        .dummy8 = fd(8, .{ .Varint = .Simple }),
        .dummy9 = fd(9, .{ .Varint = .Simple }),
        .dummy10 = fd(10, .{ .Varint = .Simple }),
        .dummy11 = fd(11, .{ .Varint = .Simple }),
        .dummy12 = fd(12, .{ .Varint = .Simple }),
        .dummy13 = fd(13, .{ .Varint = .Simple }),
        .dummy14 = fd(14, .{ .Varint = .Simple }),
        .dummy15 = fd(15, .{ .Varint = .Simple }),
        .dummy16 = fd(16, .{ .Varint = .Simple }),
        .dummy17 = fd(17, .{ .Varint = .Simple }),
        .dummy18 = fd(18, .{ .Varint = .Simple }),
        .dummy19 = fd(19, .{ .Varint = .Simple }),
        .dummy20 = fd(20, .{ .Varint = .Simple }),
        .dummy21 = fd(21, .{ .Varint = .Simple }),
        .dummy22 = fd(22, .{ .Varint = .Simple }),
        .dummy23 = fd(23, .{ .Varint = .Simple }),
        .dummy24 = fd(24, .{ .Varint = .Simple }),
        .dummy25 = fd(25, .{ .Varint = .Simple }),
        .dummy26 = fd(26, .{ .Varint = .Simple }),
        .dummy27 = fd(27, .{ .Varint = .Simple }),
        .dummy28 = fd(28, .{ .Varint = .Simple }),
        .dummy29 = fd(29, .{ .Varint = .Simple }),
        .dummy30 = fd(30, .{ .Varint = .Simple }),
        .dummy31 = fd(31, .{ .Varint = .Simple }),
        .dummy32 = fd(32, .{ .Varint = .Simple }),
        .c = fd(33, .{ .Varint = .Simple }),
        .optional_foreign = fd(34, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestRequiredForeign = struct {
    optional_message: ?TestRequired = null,
    repeated_message: ArrayList(TestRequired),
    dummy: ?i32 = null,
    optional_lazy_message: ?NestedTestAllTypes = null,

    pub const _desc_table = .{
        .optional_message = fd(1, .{ .SubMessage = {} }),
        .repeated_message = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .dummy = fd(3, .{ .Varint = .Simple }),
        .optional_lazy_message = fd(4, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestRequiredMessage = struct {
    optional_message: ?TestRequired = null,
    repeated_message: ArrayList(TestRequired),
    required_message: ?TestRequired = null,

    pub const _desc_table = .{
        .optional_message = fd(1, .{ .SubMessage = {} }),
        .repeated_message = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .required_message = fd(3, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestNestedRequiredForeign = struct {
    child: ?TestNestedRequiredForeign = null,
    payload: ?TestRequiredForeign = null,
    dummy: ?i32 = null,

    pub const _desc_table = .{
        .child = fd(1, .{ .SubMessage = {} }),
        .payload = fd(2, .{ .SubMessage = {} }),
        .dummy = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestForeignNested = struct {
    foreign_nested: ?TestAllTypes.NestedMessage = null,

    pub const _desc_table = .{
        .foreign_nested = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestEmptyMessage = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestEmptyMessageWithExtensions = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestPickleNestedMessage = struct {
    pub const _desc_table = .{};

    pub const NestedMessage = struct {
        bb: ?i32 = null,

        pub const _desc_table = .{
            .bb = fd(1, .{ .Varint = .Simple }),
        };

        pub const NestedNestedMessage = struct {
            cc: ?i32 = null,

            pub const _desc_table = .{
                .cc = fd(1, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestMultipleExtensionRanges = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestReallyLargeTagNumber = struct {
    a: ?i32 = null,
    bb: ?i32 = null,

    pub const _desc_table = .{
        .a = fd(1, .{ .Varint = .Simple }),
        .bb = fd(268435455, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestRecursiveMessage = struct {
    a: ?TestRecursiveMessage = null,
    i: ?i32 = null,

    pub const _desc_table = .{
        .a = fd(1, .{ .SubMessage = {} }),
        .i = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestMutualRecursionA = struct {
    bb: ?TestMutualRecursionB = null,
    sub_message: ?SubMessage = null,
    not_in_this_scc: ?TestAllTypes = null,

    pub const _desc_table = .{
        .bb = fd(1, .{ .SubMessage = {} }),
        .sub_message = fd(3, .{ .SubMessage = {} }),
        .not_in_this_scc = fd(4, .{ .SubMessage = {} }),
    };

    pub const SubMessage = struct {
        b: ?TestMutualRecursionB = null,

        pub const _desc_table = .{
            .b = fd(1, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestMutualRecursionB = struct {
    a: ?TestMutualRecursionA = null,
    optional_int32: ?i32 = null,

    pub const _desc_table = .{
        .a = fd(1, .{ .SubMessage = {} }),
        .optional_int32 = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestIsInitialized = struct {
    sub_message: ?SubMessage = null,

    pub const _desc_table = .{
        .sub_message = fd(1, .{ .SubMessage = {} }),
    };

    pub const SubMessage = struct {
        i: i32,

        pub const _desc_table = .{
            .i = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestDupFieldNumber = struct {
    a: ?i32 = null,

    pub const _desc_table = .{
        .a = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestEagerMessage = struct {
    sub_message: ?TestAllTypes = null,

    pub const _desc_table = .{
        .sub_message = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestLazyMessage = struct {
    sub_message: ?TestAllTypes = null,

    pub const _desc_table = .{
        .sub_message = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestEagerMaybeLazy = struct {
    message_foo: ?TestAllTypes = null,
    message_bar: ?TestAllTypes = null,
    message_baz: ?NestedMessage = null,

    pub const _desc_table = .{
        .message_foo = fd(1, .{ .SubMessage = {} }),
        .message_bar = fd(2, .{ .SubMessage = {} }),
        .message_baz = fd(3, .{ .SubMessage = {} }),
    };

    pub const NestedMessage = struct {
        @"packed": ?TestPackedTypes = null,

        pub const _desc_table = .{
            .@"packed" = fd(1, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestNestedMessageHasBits = struct {
    optional_nested_message: ?NestedMessage = null,

    pub const _desc_table = .{
        .optional_nested_message = fd(1, .{ .SubMessage = {} }),
    };

    pub const NestedMessage = struct {
        nestedmessage_repeated_int32: ArrayList(i32),
        nestedmessage_repeated_foreignmessage: ArrayList(ForeignMessage),

        pub const _desc_table = .{
            .nestedmessage_repeated_int32 = fd(1, .{ .List = .{ .Varint = .Simple } }),
            .nestedmessage_repeated_foreignmessage = fd(2, .{ .List = .{ .SubMessage = {} } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestCamelCaseFieldNames = struct {
    PrimitiveField: ?i32 = null,
    StringField: ?ManagedString = null,
    EnumField: ?ForeignEnum = null,
    MessageField: ?ForeignMessage = null,
    StringPieceField: ?ManagedString = null,
    CordField: ?ManagedString = null,
    RepeatedPrimitiveField: ArrayList(i32),
    RepeatedStringField: ArrayList(ManagedString),
    RepeatedEnumField: ArrayList(ForeignEnum),
    RepeatedMessageField: ArrayList(ForeignMessage),
    RepeatedStringPieceField: ArrayList(ManagedString),
    RepeatedCordField: ArrayList(ManagedString),

    pub const _desc_table = .{
        .PrimitiveField = fd(1, .{ .Varint = .Simple }),
        .StringField = fd(2, .String),
        .EnumField = fd(3, .{ .Varint = .Simple }),
        .MessageField = fd(4, .{ .SubMessage = {} }),
        .StringPieceField = fd(5, .String),
        .CordField = fd(6, .String),
        .RepeatedPrimitiveField = fd(7, .{ .List = .{ .Varint = .Simple } }),
        .RepeatedStringField = fd(8, .{ .List = .String }),
        .RepeatedEnumField = fd(9, .{ .List = .{ .Varint = .Simple } }),
        .RepeatedMessageField = fd(10, .{ .List = .{ .SubMessage = {} } }),
        .RepeatedStringPieceField = fd(11, .{ .List = .String }),
        .RepeatedCordField = fd(12, .{ .List = .String }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestFieldOrderings = struct {
    my_string: ?ManagedString = null,
    my_int: ?i64 = null,
    my_float: ?f32 = null,
    optional_nested_message: ?NestedMessage = null,

    pub const _desc_table = .{
        .my_string = fd(11, .String),
        .my_int = fd(1, .{ .Varint = .Simple }),
        .my_float = fd(101, .{ .FixedInt = .I32 }),
        .optional_nested_message = fd(200, .{ .SubMessage = {} }),
    };

    pub const NestedMessage = struct {
        oo: ?i64 = null,
        bb: ?i32 = null,

        pub const _desc_table = .{
            .oo = fd(2, .{ .Varint = .Simple }),
            .bb = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestExtensionOrderings1 = struct {
    my_string: ?ManagedString = null,

    pub const _desc_table = .{
        .my_string = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestExtensionOrderings2 = struct {
    my_string: ?ManagedString = null,

    pub const _desc_table = .{
        .my_string = fd(1, .String),
    };

    pub const TestExtensionOrderings3 = struct {
        my_string: ?ManagedString = null,

        pub const _desc_table = .{
            .my_string = fd(1, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestExtremeDefaultValues = struct {
    escaped_bytes: ?ManagedString = ManagedString.static("\\000\\001\\007\\010\\014\\n\\r\\t\\013\\\\\\'\\\"\\376"),
    large_uint32: ?u32 = 4294967295,
    large_uint64: ?u64 = 18446744073709551615,
    small_int32: ?i32 = -2147483647,
    small_int64: ?i64 = -9223372036854775807,
    really_small_int32: ?i32 = -2147483648,
    really_small_int64: ?i64 = -9223372036854775808,
    utf8_string: ?ManagedString = ManagedString.static("\xE1\x88\xB4"),
    zero_float: ?f32 = 0,
    one_float: ?f32 = 1,
    small_float: ?f32 = 1.5,
    negative_one_float: ?f32 = -1,
    negative_float: ?f32 = -1.5,
    large_float: ?f32 = 2e+08,
    small_negative_float: ?f32 = -8e-28,
    inf_double: ?f64 = std.math.inf(f64),
    neg_inf_double: ?f64 = -std.math.inf(f64),
    nan_double: ?f64 = std.math.nan(f64),
    inf_float: ?f32 = std.math.inf(f32),
    neg_inf_float: ?f32 = -std.math.inf(f32),
    nan_float: ?f32 = std.math.nan(f32),
    cpp_trigraph: ?ManagedString = ManagedString.static("? ? ?? ?? ??? ??/ ??-"),
    string_with_zero: ?ManagedString = ManagedString.static("hel\x00lo"),
    bytes_with_zero: ?ManagedString = ManagedString.static("wor\\000ld"),
    string_piece_with_zero: ?ManagedString = ManagedString.static("ab\x00c"),
    cord_with_zero: ?ManagedString = ManagedString.static("12\x003"),
    replacement_string: ?ManagedString = ManagedString.static("${unknown}"),

    pub const _desc_table = .{
        .escaped_bytes = fd(1, .Bytes),
        .large_uint32 = fd(2, .{ .Varint = .Simple }),
        .large_uint64 = fd(3, .{ .Varint = .Simple }),
        .small_int32 = fd(4, .{ .Varint = .Simple }),
        .small_int64 = fd(5, .{ .Varint = .Simple }),
        .really_small_int32 = fd(21, .{ .Varint = .Simple }),
        .really_small_int64 = fd(22, .{ .Varint = .Simple }),
        .utf8_string = fd(6, .String),
        .zero_float = fd(7, .{ .FixedInt = .I32 }),
        .one_float = fd(8, .{ .FixedInt = .I32 }),
        .small_float = fd(9, .{ .FixedInt = .I32 }),
        .negative_one_float = fd(10, .{ .FixedInt = .I32 }),
        .negative_float = fd(11, .{ .FixedInt = .I32 }),
        .large_float = fd(12, .{ .FixedInt = .I32 }),
        .small_negative_float = fd(13, .{ .FixedInt = .I32 }),
        .inf_double = fd(14, .{ .FixedInt = .I64 }),
        .neg_inf_double = fd(15, .{ .FixedInt = .I64 }),
        .nan_double = fd(16, .{ .FixedInt = .I64 }),
        .inf_float = fd(17, .{ .FixedInt = .I32 }),
        .neg_inf_float = fd(18, .{ .FixedInt = .I32 }),
        .nan_float = fd(19, .{ .FixedInt = .I32 }),
        .cpp_trigraph = fd(20, .String),
        .string_with_zero = fd(23, .String),
        .bytes_with_zero = fd(24, .Bytes),
        .string_piece_with_zero = fd(25, .String),
        .cord_with_zero = fd(26, .String),
        .replacement_string = fd(27, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SparseEnumMessage = struct {
    sparse_enum: ?TestSparseEnum = null,

    pub const _desc_table = .{
        .sparse_enum = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const OneString = struct {
    data: ?ManagedString = null,

    pub const _desc_table = .{
        .data = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MoreString = struct {
    data: ArrayList(ManagedString),

    pub const _desc_table = .{
        .data = fd(1, .{ .List = .String }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const OneBytes = struct {
    data: ?ManagedString = null,

    pub const _desc_table = .{
        .data = fd(1, .Bytes),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MoreBytes = struct {
    data: ArrayList(ManagedString),

    pub const _desc_table = .{
        .data = fd(1, .{ .List = .Bytes }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ManyOptionalString = struct {
    str1: ?ManagedString = null,
    str2: ?ManagedString = null,
    str3: ?ManagedString = null,
    str4: ?ManagedString = null,
    str5: ?ManagedString = null,
    str6: ?ManagedString = null,
    str7: ?ManagedString = null,
    str8: ?ManagedString = null,
    str9: ?ManagedString = null,
    str10: ?ManagedString = null,
    str11: ?ManagedString = null,
    str12: ?ManagedString = null,
    str13: ?ManagedString = null,
    str14: ?ManagedString = null,
    str15: ?ManagedString = null,
    str16: ?ManagedString = null,
    str17: ?ManagedString = null,
    str18: ?ManagedString = null,
    str19: ?ManagedString = null,
    str20: ?ManagedString = null,
    str21: ?ManagedString = null,
    str22: ?ManagedString = null,
    str23: ?ManagedString = null,
    str24: ?ManagedString = null,
    str25: ?ManagedString = null,
    str26: ?ManagedString = null,
    str27: ?ManagedString = null,
    str28: ?ManagedString = null,
    str29: ?ManagedString = null,
    str30: ?ManagedString = null,
    str31: ?ManagedString = null,
    str32: ?ManagedString = null,

    pub const _desc_table = .{
        .str1 = fd(1, .String),
        .str2 = fd(2, .String),
        .str3 = fd(3, .String),
        .str4 = fd(4, .String),
        .str5 = fd(5, .String),
        .str6 = fd(6, .String),
        .str7 = fd(7, .String),
        .str8 = fd(8, .String),
        .str9 = fd(9, .String),
        .str10 = fd(10, .String),
        .str11 = fd(11, .String),
        .str12 = fd(12, .String),
        .str13 = fd(13, .String),
        .str14 = fd(14, .String),
        .str15 = fd(15, .String),
        .str16 = fd(16, .String),
        .str17 = fd(17, .String),
        .str18 = fd(18, .String),
        .str19 = fd(19, .String),
        .str20 = fd(20, .String),
        .str21 = fd(21, .String),
        .str22 = fd(22, .String),
        .str23 = fd(23, .String),
        .str24 = fd(24, .String),
        .str25 = fd(25, .String),
        .str26 = fd(26, .String),
        .str27 = fd(27, .String),
        .str28 = fd(28, .String),
        .str29 = fd(29, .String),
        .str30 = fd(30, .String),
        .str31 = fd(31, .String),
        .str32 = fd(32, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Int32Message = struct {
    data: ?i32 = null,

    pub const _desc_table = .{
        .data = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Uint32Message = struct {
    data: ?u32 = null,

    pub const _desc_table = .{
        .data = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Int64Message = struct {
    data: ?i64 = null,

    pub const _desc_table = .{
        .data = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Uint64Message = struct {
    data: ?u64 = null,

    pub const _desc_table = .{
        .data = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BoolMessage = struct {
    data: ?bool = null,

    pub const _desc_table = .{
        .data = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestOneof = struct {
    foo: ?foo_union,

    pub const _foo_case = enum {
        foo_int,
        foo_string,
        foo_message,
        a,
        b,
    };
    pub const foo_union = union(_foo_case) {
        foo_int: i32,
        foo_string: ManagedString,
        foo_message: TestAllTypes,
        a: i32,
        b: ManagedString,
        pub const _union_desc = .{
            .foo_int = fd(1, .{ .Varint = .Simple }),
            .foo_string = fd(2, .String),
            .foo_message = fd(3, .{ .SubMessage = {} }),
            .a = fd(5, .{ .Varint = .Simple }),
            .b = fd(6, .String),
        };
    };

    pub const _desc_table = .{
        .foo = fd(null, .{ .OneOf = foo_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestOneofBackwardsCompatible = struct {
    foo_int: ?i32 = null,
    foo_string: ?ManagedString = null,
    foo_message: ?TestAllTypes = null,
    a: ?i32 = null,
    b: ?ManagedString = null,

    pub const _desc_table = .{
        .foo_int = fd(1, .{ .Varint = .Simple }),
        .foo_string = fd(2, .String),
        .foo_message = fd(3, .{ .SubMessage = {} }),
        .a = fd(5, .{ .Varint = .Simple }),
        .b = fd(6, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestOneof2 = struct {
    baz_int: ?i32 = null,
    baz_string: ?ManagedString = ManagedString.static("BAZ"),
    foo: ?foo_union,
    bar: ?bar_union,

    pub const _foo_case = enum {
        foo_int,
        foo_string,
        foo_cord,
        foo_string_piece,
        foo_bytes,
        foo_enum,
        foo_message,
        a,
        b,
        foo_lazy_message,
    };
    pub const foo_union = union(_foo_case) {
        foo_int: i32,
        foo_string: ManagedString,
        foo_cord: ManagedString,
        foo_string_piece: ManagedString,
        foo_bytes: ManagedString,
        foo_enum: NestedEnum,
        foo_message: NestedMessage,
        a: i32,
        b: ManagedString,
        foo_lazy_message: NestedMessage,
        pub const _union_desc = .{
            .foo_int = fd(1, .{ .Varint = .Simple }),
            .foo_string = fd(2, .String),
            .foo_cord = fd(3, .String),
            .foo_string_piece = fd(4, .String),
            .foo_bytes = fd(5, .Bytes),
            .foo_enum = fd(6, .{ .Varint = .Simple }),
            .foo_message = fd(7, .{ .SubMessage = {} }),
            .a = fd(9, .{ .Varint = .Simple }),
            .b = fd(10, .String),
            .foo_lazy_message = fd(11, .{ .SubMessage = {} }),
        };
    };

    pub const _bar_case = enum {
        bar_int,
        bar_string,
        bar_cord,
        bar_string_piece,
        bar_bytes,
        bar_enum,
        bar_string_with_empty_default,
        bar_cord_with_empty_default,
        bar_string_piece_with_empty_default,
        bar_bytes_with_empty_default,
    };
    pub const bar_union = union(_bar_case) {
        bar_int: i32,
        bar_string: ManagedString,
        bar_cord: ManagedString,
        bar_string_piece: ManagedString,
        bar_bytes: ManagedString,
        bar_enum: NestedEnum,
        bar_string_with_empty_default: ManagedString,
        bar_cord_with_empty_default: ManagedString,
        bar_string_piece_with_empty_default: ManagedString,
        bar_bytes_with_empty_default: ManagedString,
        pub const _union_desc = .{
            .bar_int = fd(12, .{ .Varint = .Simple }),
            .bar_string = fd(13, .String),
            .bar_cord = fd(14, .String),
            .bar_string_piece = fd(15, .String),
            .bar_bytes = fd(16, .Bytes),
            .bar_enum = fd(17, .{ .Varint = .Simple }),
            .bar_string_with_empty_default = fd(20, .String),
            .bar_cord_with_empty_default = fd(21, .String),
            .bar_string_piece_with_empty_default = fd(22, .String),
            .bar_bytes_with_empty_default = fd(23, .Bytes),
        };
    };

    pub const _desc_table = .{
        .baz_int = fd(18, .{ .Varint = .Simple }),
        .baz_string = fd(19, .String),
        .foo = fd(null, .{ .OneOf = foo_union }),
        .bar = fd(null, .{ .OneOf = bar_union }),
    };

    pub const NestedEnum = enum(i32) {
        FOO = 1,
        BAR = 2,
        BAZ = 3,
        _,
    };

    pub const NestedMessage = struct {
        moo_int: ?i64 = null,
        corge_int: ArrayList(i32),

        pub const _desc_table = .{
            .moo_int = fd(1, .{ .Varint = .Simple }),
            .corge_int = fd(2, .{ .List = .{ .Varint = .Simple } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestRequiredOneof = struct {
    foo: ?foo_union,

    pub const _foo_case = enum {
        foo_int,
        foo_string,
        foo_message,
    };
    pub const foo_union = union(_foo_case) {
        foo_int: i32,
        foo_string: ManagedString,
        foo_message: NestedMessage,
        pub const _union_desc = .{
            .foo_int = fd(1, .{ .Varint = .Simple }),
            .foo_string = fd(2, .String),
            .foo_message = fd(3, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .foo = fd(null, .{ .OneOf = foo_union }),
    };

    pub const NestedMessage = struct {
        required_double: f64,

        pub const _desc_table = .{
            .required_double = fd(1, .{ .FixedInt = .I64 }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestPackedTypes = struct {
    packed_int32: ArrayList(i32),
    packed_int64: ArrayList(i64),
    packed_uint32: ArrayList(u32),
    packed_uint64: ArrayList(u64),
    packed_sint32: ArrayList(i32),
    packed_sint64: ArrayList(i64),
    packed_fixed32: ArrayList(u32),
    packed_fixed64: ArrayList(u64),
    packed_sfixed32: ArrayList(i32),
    packed_sfixed64: ArrayList(i64),
    packed_float: ArrayList(f32),
    packed_double: ArrayList(f64),
    packed_bool: ArrayList(bool),
    packed_enum: ArrayList(ForeignEnum),

    pub const _desc_table = .{
        .packed_int32 = fd(90, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_int64 = fd(91, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_uint32 = fd(92, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_uint64 = fd(93, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_sint32 = fd(94, .{ .PackedList = .{ .Varint = .ZigZagOptimized } }),
        .packed_sint64 = fd(95, .{ .PackedList = .{ .Varint = .ZigZagOptimized } }),
        .packed_fixed32 = fd(96, .{ .PackedList = .{ .FixedInt = .I32 } }),
        .packed_fixed64 = fd(97, .{ .PackedList = .{ .FixedInt = .I64 } }),
        .packed_sfixed32 = fd(98, .{ .PackedList = .{ .FixedInt = .I32 } }),
        .packed_sfixed64 = fd(99, .{ .PackedList = .{ .FixedInt = .I64 } }),
        .packed_float = fd(100, .{ .PackedList = .{ .FixedInt = .I32 } }),
        .packed_double = fd(101, .{ .PackedList = .{ .FixedInt = .I64 } }),
        .packed_bool = fd(102, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_enum = fd(103, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestUnpackedTypes = struct {
    unpacked_int32: ArrayList(i32),
    unpacked_int64: ArrayList(i64),
    unpacked_uint32: ArrayList(u32),
    unpacked_uint64: ArrayList(u64),
    unpacked_sint32: ArrayList(i32),
    unpacked_sint64: ArrayList(i64),
    unpacked_fixed32: ArrayList(u32),
    unpacked_fixed64: ArrayList(u64),
    unpacked_sfixed32: ArrayList(i32),
    unpacked_sfixed64: ArrayList(i64),
    unpacked_float: ArrayList(f32),
    unpacked_double: ArrayList(f64),
    unpacked_bool: ArrayList(bool),
    unpacked_enum: ArrayList(ForeignEnum),

    pub const _desc_table = .{
        .unpacked_int32 = fd(90, .{ .List = .{ .Varint = .Simple } }),
        .unpacked_int64 = fd(91, .{ .List = .{ .Varint = .Simple } }),
        .unpacked_uint32 = fd(92, .{ .List = .{ .Varint = .Simple } }),
        .unpacked_uint64 = fd(93, .{ .List = .{ .Varint = .Simple } }),
        .unpacked_sint32 = fd(94, .{ .List = .{ .Varint = .ZigZagOptimized } }),
        .unpacked_sint64 = fd(95, .{ .List = .{ .Varint = .ZigZagOptimized } }),
        .unpacked_fixed32 = fd(96, .{ .List = .{ .FixedInt = .I32 } }),
        .unpacked_fixed64 = fd(97, .{ .List = .{ .FixedInt = .I64 } }),
        .unpacked_sfixed32 = fd(98, .{ .List = .{ .FixedInt = .I32 } }),
        .unpacked_sfixed64 = fd(99, .{ .List = .{ .FixedInt = .I64 } }),
        .unpacked_float = fd(100, .{ .List = .{ .FixedInt = .I32 } }),
        .unpacked_double = fd(101, .{ .List = .{ .FixedInt = .I64 } }),
        .unpacked_bool = fd(102, .{ .List = .{ .Varint = .Simple } }),
        .unpacked_enum = fd(103, .{ .List = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestPackedExtensions = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestUnpackedExtensions = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestDynamicExtensions = struct {
    scalar_extension: ?u32 = null,
    enum_extension: ?ForeignEnum = null,
    dynamic_enum_extension: ?DynamicEnumType = null,
    message_extension: ?ForeignMessage = null,
    dynamic_message_extension: ?DynamicMessageType = null,
    repeated_extension: ArrayList(ManagedString),
    packed_extension: ArrayList(i32),

    pub const _desc_table = .{
        .scalar_extension = fd(2000, .{ .FixedInt = .I32 }),
        .enum_extension = fd(2001, .{ .Varint = .Simple }),
        .dynamic_enum_extension = fd(2002, .{ .Varint = .Simple }),
        .message_extension = fd(2003, .{ .SubMessage = {} }),
        .dynamic_message_extension = fd(2004, .{ .SubMessage = {} }),
        .repeated_extension = fd(2005, .{ .List = .String }),
        .packed_extension = fd(2006, .{ .PackedList = .{ .Varint = .ZigZagOptimized } }),
    };

    pub const DynamicEnumType = enum(i32) {
        DYNAMIC_FOO = 2200,
        DYNAMIC_BAR = 2201,
        DYNAMIC_BAZ = 2202,
        _,
    };

    pub const DynamicMessageType = struct {
        dynamic_field: ?i32 = null,

        pub const _desc_table = .{
            .dynamic_field = fd(2100, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestRepeatedScalarDifferentTagSizes = struct {
    repeated_fixed32: ArrayList(u32),
    repeated_int32: ArrayList(i32),
    repeated_fixed64: ArrayList(u64),
    repeated_int64: ArrayList(i64),
    repeated_float: ArrayList(f32),
    repeated_uint64: ArrayList(u64),

    pub const _desc_table = .{
        .repeated_fixed32 = fd(12, .{ .List = .{ .FixedInt = .I32 } }),
        .repeated_int32 = fd(13, .{ .List = .{ .Varint = .Simple } }),
        .repeated_fixed64 = fd(2046, .{ .List = .{ .FixedInt = .I64 } }),
        .repeated_int64 = fd(2047, .{ .List = .{ .Varint = .Simple } }),
        .repeated_float = fd(262142, .{ .List = .{ .FixedInt = .I32 } }),
        .repeated_uint64 = fd(262143, .{ .List = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestParsingMerge = struct {
    required_all_types: ?TestAllTypes = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),
    optional_group_all_types: ?TestAllTypes = null,
    repeated_group_all_types: ?TestAllTypes = null,

    pub const _desc_table = .{
        .required_all_types = fd(1, .{ .SubMessage = {} }),
        .optional_all_types = fd(2, .{ .SubMessage = {} }),
        .repeated_all_types = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .optional_group_all_types = fd(11, .{ .SubMessage = {} }),
        .repeated_group_all_types = fd(21, .{ .SubMessage = {} }),
    };

    pub const RepeatedFieldsGenerator = struct {
        field1: ArrayList(TestAllTypes),
        field2: ArrayList(TestAllTypes),
        field3: ArrayList(TestAllTypes),
        Group1_field1: ?TestAllTypes = null,
        Group2_field1: ?TestAllTypes = null,
        ext1: ArrayList(TestAllTypes),
        ext2: ArrayList(TestAllTypes),

        pub const _desc_table = .{
            .field1 = fd(1, .{ .List = .{ .SubMessage = {} } }),
            .field2 = fd(2, .{ .List = .{ .SubMessage = {} } }),
            .field3 = fd(3, .{ .List = .{ .SubMessage = {} } }),
            .Group1_field1 = fd(11, .{ .SubMessage = {} }),
            .Group2_field1 = fd(21, .{ .SubMessage = {} }),
            .ext1 = fd(1000, .{ .List = .{ .SubMessage = {} } }),
            .ext2 = fd(1001, .{ .List = .{ .SubMessage = {} } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestMergeException = struct {
    all_extensions: ?TestAllExtensions = null,

    pub const _desc_table = .{
        .all_extensions = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestCommentInjectionMessage = struct {
    a: ?ManagedString = ManagedString.static("*/ <- Neither should this."),

    pub const _desc_table = .{
        .a = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestMessageSize = struct {
    m1: ?bool = null,
    m2: ?i64 = null,
    m3: ?bool = null,
    m4: ?ManagedString = null,
    m5: ?i32 = null,
    m6: ?i64 = null,

    pub const _desc_table = .{
        .m1 = fd(1, .{ .Varint = .Simple }),
        .m2 = fd(2, .{ .Varint = .Simple }),
        .m3 = fd(3, .{ .Varint = .Simple }),
        .m4 = fd(4, .String),
        .m5 = fd(5, .{ .Varint = .Simple }),
        .m6 = fd(6, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FooRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FooResponse = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FooClientMessage = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FooServerMessage = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BarRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BarResponse = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestJsonName = struct {
    field_name1: ?i32 = null,
    fieldName2: ?i32 = null,
    FieldName3: ?i32 = null,
    _field_name4: ?i32 = null,
    FIELD_NAME5: ?i32 = null,
    field_name6: ?i32 = null,
    fieldname7: ?i32 = null,

    pub const _desc_table = .{
        .field_name1 = fd(1, .{ .Varint = .Simple }),
        .fieldName2 = fd(2, .{ .Varint = .Simple }),
        .FieldName3 = fd(3, .{ .Varint = .Simple }),
        ._field_name4 = fd(4, .{ .Varint = .Simple }),
        .FIELD_NAME5 = fd(5, .{ .Varint = .Simple }),
        .field_name6 = fd(6, .{ .Varint = .Simple }),
        .fieldname7 = fd(7, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestHugeFieldNumbers = struct {
    optional_int32: ?i32 = null,
    fixed_32: ?i32 = null,
    repeated_int32: ArrayList(i32),
    packed_int32: ArrayList(i32),
    optional_enum: ?ForeignEnum = null,
    optional_string: ?ManagedString = null,
    optional_bytes: ?ManagedString = null,
    optional_message: ?ForeignMessage = null,
    group_a: ?i32 = null,
    string_string_map: ArrayList(StringStringMapEntry),
    oneof_field: ?oneof_field_union,

    pub const _oneof_field_case = enum {
        oneof_uint32,
        oneof_test_all_types,
        oneof_string,
        oneof_bytes,
    };
    pub const oneof_field_union = union(_oneof_field_case) {
        oneof_uint32: u32,
        oneof_test_all_types: TestAllTypes,
        oneof_string: ManagedString,
        oneof_bytes: ManagedString,
        pub const _union_desc = .{
            .oneof_uint32 = fd(536870011, .{ .Varint = .Simple }),
            .oneof_test_all_types = fd(536870012, .{ .SubMessage = {} }),
            .oneof_string = fd(536870013, .String),
            .oneof_bytes = fd(536870014, .Bytes),
        };
    };

    pub const _desc_table = .{
        .optional_int32 = fd(536870000, .{ .Varint = .Simple }),
        .fixed_32 = fd(536870001, .{ .Varint = .Simple }),
        .repeated_int32 = fd(536870002, .{ .List = .{ .Varint = .Simple } }),
        .packed_int32 = fd(536870003, .{ .PackedList = .{ .Varint = .Simple } }),
        .optional_enum = fd(536870004, .{ .Varint = .Simple }),
        .optional_string = fd(536870005, .String),
        .optional_bytes = fd(536870006, .Bytes),
        .optional_message = fd(536870007, .{ .SubMessage = {} }),
        .group_a = fd(536870009, .{ .Varint = .Simple }),
        .string_string_map = fd(536870010, .{ .List = .{ .SubMessage = {} } }),
        .oneof_field = fd(null, .{ .OneOf = oneof_field_union }),
    };

    pub const StringStringMapEntry = struct {
        key: ?ManagedString = null,
        value: ?ManagedString = null,

        pub const _desc_table = .{
            .key = fd(1, .String),
            .value = fd(2, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestExtensionInsideTable = struct {
    field1: ?i32 = null,
    field2: ?i32 = null,
    field3: ?i32 = null,
    field4: ?i32 = null,
    field6: ?i32 = null,
    field7: ?i32 = null,
    field8: ?i32 = null,
    field9: ?i32 = null,
    field10: ?i32 = null,

    pub const _desc_table = .{
        .field1 = fd(1, .{ .Varint = .Simple }),
        .field2 = fd(2, .{ .Varint = .Simple }),
        .field3 = fd(3, .{ .Varint = .Simple }),
        .field4 = fd(4, .{ .Varint = .Simple }),
        .field6 = fd(6, .{ .Varint = .Simple }),
        .field7 = fd(7, .{ .Varint = .Simple }),
        .field8 = fd(8, .{ .Varint = .Simple }),
        .field9 = fd(9, .{ .Varint = .Simple }),
        .field10 = fd(10, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestNestedGroupExtensionInnerExtension = struct {
    inner_name: ?ManagedString = null,

    pub const _desc_table = .{
        .inner_name = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestExtensionRangeSerialize = struct {
    foo_one: ?i32 = null,
    foo_two: ?i32 = null,
    foo_three: ?i32 = null,
    foo_four: ?i32 = null,

    pub const _desc_table = .{
        .foo_one = fd(1, .{ .Varint = .Simple }),
        .foo_two = fd(6, .{ .Varint = .Simple }),
        .foo_three = fd(7, .{ .Varint = .Simple }),
        .foo_four = fd(13, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyInt32Simple = struct {
    optional_int32_1: ?i32 = null,
    optional_int32_2: ?i32 = null,
    optional_int32_63: ?i32 = null,
    optional_int32_64: ?i32 = null,

    pub const _desc_table = .{
        .optional_int32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_int32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_int32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_int32_64 = fd(64, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyInt32 = struct {
    optional_int32_1: ?i32 = null,
    optional_int32_2: ?i32 = null,
    optional_int32_63: ?i32 = null,
    optional_int32_64: ?i32 = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),

    pub const _desc_table = .{
        .optional_int32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_int32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_int32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_int32_64 = fd(64, .{ .Varint = .Simple }),
        .optional_all_types = fd(9, .{ .SubMessage = {} }),
        .repeated_all_types = fd(10, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyMostlyInt32 = struct {
    optional_int64_30: ?i64 = null,
    optional_int32_1: ?i32 = null,
    optional_int32_2: ?i32 = null,
    optional_int32_3: ?i32 = null,
    optional_int32_4: ?i32 = null,
    optional_int32_63: ?i32 = null,
    optional_int32_64: ?i32 = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),

    pub const _desc_table = .{
        .optional_int64_30 = fd(30, .{ .Varint = .Simple }),
        .optional_int32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_int32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_int32_3 = fd(3, .{ .Varint = .Simple }),
        .optional_int32_4 = fd(4, .{ .Varint = .Simple }),
        .optional_int32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_int32_64 = fd(64, .{ .Varint = .Simple }),
        .optional_all_types = fd(9, .{ .SubMessage = {} }),
        .repeated_all_types = fd(10, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyMostlyInt32BigFieldNumber = struct {
    optional_int64_30: ?i64 = null,
    optional_int32_300: ?i32 = null,
    optional_int32_1: ?i32 = null,
    optional_int32_2: ?i32 = null,
    optional_int32_3: ?i32 = null,
    optional_int32_4: ?i32 = null,
    optional_int32_63: ?i32 = null,
    optional_int32_64: ?i32 = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),

    pub const _desc_table = .{
        .optional_int64_30 = fd(30, .{ .Varint = .Simple }),
        .optional_int32_300 = fd(300, .{ .Varint = .Simple }),
        .optional_int32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_int32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_int32_3 = fd(3, .{ .Varint = .Simple }),
        .optional_int32_4 = fd(4, .{ .Varint = .Simple }),
        .optional_int32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_int32_64 = fd(64, .{ .Varint = .Simple }),
        .optional_all_types = fd(9, .{ .SubMessage = {} }),
        .repeated_all_types = fd(10, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyUint32Simple = struct {
    optional_uint32_1: ?u32 = null,
    optional_uint32_2: ?u32 = null,
    optional_uint32_63: ?u32 = null,
    optional_uint32_64: ?u32 = null,

    pub const _desc_table = .{
        .optional_uint32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_uint32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_uint32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_uint32_64 = fd(64, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyUint32 = struct {
    optional_uint32_1: ?u32 = null,
    optional_uint32_2: ?u32 = null,
    optional_uint32_63: ?u32 = null,
    optional_uint32_64: ?u32 = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),

    pub const _desc_table = .{
        .optional_uint32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_uint32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_uint32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_uint32_64 = fd(64, .{ .Varint = .Simple }),
        .optional_all_types = fd(9, .{ .SubMessage = {} }),
        .repeated_all_types = fd(10, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyOneUint32 = struct {
    optional_uint32_1: ?u32 = null,
    optional_int32_2: ?i32 = null,
    optional_int32_63: ?i32 = null,
    optional_int32_64: ?i32 = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),

    pub const _desc_table = .{
        .optional_uint32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_int32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_int32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_int32_64 = fd(64, .{ .Varint = .Simple }),
        .optional_all_types = fd(9, .{ .SubMessage = {} }),
        .repeated_all_types = fd(10, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyOneInt32BigFieldNumber = struct {
    optional_int32_65: ?i32 = null,
    optional_int64_1: ?i64 = null,
    optional_int64_2: ?i64 = null,
    optional_int64_63: ?i64 = null,
    optional_int64_64: ?i64 = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),

    pub const _desc_table = .{
        .optional_int32_65 = fd(65, .{ .Varint = .Simple }),
        .optional_int64_1 = fd(1, .{ .Varint = .Simple }),
        .optional_int64_2 = fd(2, .{ .Varint = .Simple }),
        .optional_int64_63 = fd(63, .{ .Varint = .Simple }),
        .optional_int64_64 = fd(64, .{ .Varint = .Simple }),
        .optional_all_types = fd(9, .{ .SubMessage = {} }),
        .repeated_all_types = fd(10, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyInt32BigFieldNumber = struct {
    optional_int32_1000: ?i32 = null,
    optional_int32_65: ?i32 = null,
    optional_int32_1: ?i32 = null,
    optional_int32_2: ?i32 = null,
    optional_int32_63: ?i32 = null,
    optional_int32_64: ?i32 = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),

    pub const _desc_table = .{
        .optional_int32_1000 = fd(1000, .{ .Varint = .Simple }),
        .optional_int32_65 = fd(65, .{ .Varint = .Simple }),
        .optional_int32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_int32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_int32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_int32_64 = fd(64, .{ .Varint = .Simple }),
        .optional_all_types = fd(9, .{ .SubMessage = {} }),
        .repeated_all_types = fd(10, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyUint32BigFieldNumber = struct {
    optional_uint32_1000: ?u32 = null,
    optional_uint32_65: ?u32 = null,
    optional_uint32_1: ?u32 = null,
    optional_uint32_2: ?u32 = null,
    optional_uint32_63: ?u32 = null,
    optional_uint32_64: ?u32 = null,
    optional_all_types: ?TestAllTypes = null,
    repeated_all_types: ArrayList(TestAllTypes),

    pub const _desc_table = .{
        .optional_uint32_1000 = fd(1000, .{ .Varint = .Simple }),
        .optional_uint32_65 = fd(65, .{ .Varint = .Simple }),
        .optional_uint32_1 = fd(1, .{ .Varint = .Simple }),
        .optional_uint32_2 = fd(2, .{ .Varint = .Simple }),
        .optional_uint32_63 = fd(63, .{ .Varint = .Simple }),
        .optional_uint32_64 = fd(64, .{ .Varint = .Simple }),
        .optional_all_types = fd(9, .{ .SubMessage = {} }),
        .repeated_all_types = fd(10, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TestVerifyBigFieldNumberUint32 = struct {
    optional_nested: ?Nested = null,

    pub const _desc_table = .{
        .optional_nested = fd(1, .{ .SubMessage = {} }),
    };

    pub const Nested = struct {
        optional_uint32_5000: ?u32 = null,
        optional_uint32_1000: ?u32 = null,
        optional_uint32_66: ?u32 = null,
        optional_uint32_65: ?u32 = null,
        optional_uint32_1: ?u32 = null,
        optional_uint32_2: ?u32 = null,
        optional_uint32_63: ?u32 = null,
        optional_uint32_64: ?u32 = null,
        optional_nested: ?TestVerifyBigFieldNumberUint32.Nested = null,
        repeated_nested: ArrayList(TestVerifyBigFieldNumberUint32.Nested),

        pub const _desc_table = .{
            .optional_uint32_5000 = fd(5000, .{ .Varint = .Simple }),
            .optional_uint32_1000 = fd(1000, .{ .Varint = .Simple }),
            .optional_uint32_66 = fd(66, .{ .Varint = .Simple }),
            .optional_uint32_65 = fd(65, .{ .Varint = .Simple }),
            .optional_uint32_1 = fd(1, .{ .Varint = .Simple }),
            .optional_uint32_2 = fd(2, .{ .Varint = .Simple }),
            .optional_uint32_63 = fd(63, .{ .Varint = .Simple }),
            .optional_uint32_64 = fd(64, .{ .Varint = .Simple }),
            .optional_nested = fd(9, .{ .SubMessage = {} }),
            .repeated_nested = fd(10, .{ .List = .{ .SubMessage = {} } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EnumParseTester = struct {
    optional_seq_small_0_lowfield: ?SeqSmall0 = null,
    optional_seq_small_0_midfield: ?SeqSmall0 = null,
    optional_seq_small_0_hifield: ?SeqSmall0 = null,
    repeated_seq_small_0_lowfield: ArrayList(SeqSmall0),
    repeated_seq_small_0_midfield: ArrayList(SeqSmall0),
    repeated_seq_small_0_hifield: ArrayList(SeqSmall0),
    packed_seq_small_0_lowfield: ArrayList(SeqSmall0),
    packed_seq_small_0_midfield: ArrayList(SeqSmall0),
    packed_seq_small_0_hifield: ArrayList(SeqSmall0),
    optional_seq_small_1_lowfield: ?SeqSmall1 = null,
    optional_seq_small_1_midfield: ?SeqSmall1 = null,
    optional_seq_small_1_hifield: ?SeqSmall1 = null,
    repeated_seq_small_1_lowfield: ArrayList(SeqSmall1),
    repeated_seq_small_1_midfield: ArrayList(SeqSmall1),
    repeated_seq_small_1_hifield: ArrayList(SeqSmall1),
    packed_seq_small_1_lowfield: ArrayList(SeqSmall1),
    packed_seq_small_1_midfield: ArrayList(SeqSmall1),
    packed_seq_small_1_hifield: ArrayList(SeqSmall1),
    optional_seq_large_lowfield: ?SeqLarge = null,
    optional_seq_large_midfield: ?SeqLarge = null,
    optional_seq_large_hifield: ?SeqLarge = null,
    repeated_seq_large_lowfield: ArrayList(SeqLarge),
    repeated_seq_large_midfield: ArrayList(SeqLarge),
    repeated_seq_large_hifield: ArrayList(SeqLarge),
    packed_seq_large_lowfield: ArrayList(SeqLarge),
    packed_seq_large_midfield: ArrayList(SeqLarge),
    packed_seq_large_hifield: ArrayList(SeqLarge),
    optional_arbitrary_lowfield: ?Arbitrary = null,
    optional_arbitrary_midfield: ?Arbitrary = null,
    optional_arbitrary_hifield: ?Arbitrary = null,
    repeated_arbitrary_lowfield: ArrayList(Arbitrary),
    repeated_arbitrary_midfield: ArrayList(Arbitrary),
    repeated_arbitrary_hifield: ArrayList(Arbitrary),
    packed_arbitrary_lowfield: ArrayList(Arbitrary),
    packed_arbitrary_midfield: ArrayList(Arbitrary),
    packed_arbitrary_hifield: ArrayList(Arbitrary),
    other_field: ?i32 = null,

    pub const _desc_table = .{
        .optional_seq_small_0_lowfield = fd(1, .{ .Varint = .Simple }),
        .optional_seq_small_0_midfield = fd(1001, .{ .Varint = .Simple }),
        .optional_seq_small_0_hifield = fd(1000001, .{ .Varint = .Simple }),
        .repeated_seq_small_0_lowfield = fd(2, .{ .List = .{ .Varint = .Simple } }),
        .repeated_seq_small_0_midfield = fd(1002, .{ .List = .{ .Varint = .Simple } }),
        .repeated_seq_small_0_hifield = fd(1000002, .{ .List = .{ .Varint = .Simple } }),
        .packed_seq_small_0_lowfield = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_seq_small_0_midfield = fd(1003, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_seq_small_0_hifield = fd(1000003, .{ .PackedList = .{ .Varint = .Simple } }),
        .optional_seq_small_1_lowfield = fd(4, .{ .Varint = .Simple }),
        .optional_seq_small_1_midfield = fd(1004, .{ .Varint = .Simple }),
        .optional_seq_small_1_hifield = fd(1000004, .{ .Varint = .Simple }),
        .repeated_seq_small_1_lowfield = fd(5, .{ .List = .{ .Varint = .Simple } }),
        .repeated_seq_small_1_midfield = fd(1005, .{ .List = .{ .Varint = .Simple } }),
        .repeated_seq_small_1_hifield = fd(1000005, .{ .List = .{ .Varint = .Simple } }),
        .packed_seq_small_1_lowfield = fd(6, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_seq_small_1_midfield = fd(1006, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_seq_small_1_hifield = fd(1000006, .{ .PackedList = .{ .Varint = .Simple } }),
        .optional_seq_large_lowfield = fd(7, .{ .Varint = .Simple }),
        .optional_seq_large_midfield = fd(1007, .{ .Varint = .Simple }),
        .optional_seq_large_hifield = fd(1000007, .{ .Varint = .Simple }),
        .repeated_seq_large_lowfield = fd(8, .{ .List = .{ .Varint = .Simple } }),
        .repeated_seq_large_midfield = fd(1008, .{ .List = .{ .Varint = .Simple } }),
        .repeated_seq_large_hifield = fd(1000008, .{ .List = .{ .Varint = .Simple } }),
        .packed_seq_large_lowfield = fd(9, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_seq_large_midfield = fd(1009, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_seq_large_hifield = fd(1000009, .{ .PackedList = .{ .Varint = .Simple } }),
        .optional_arbitrary_lowfield = fd(10, .{ .Varint = .Simple }),
        .optional_arbitrary_midfield = fd(1010, .{ .Varint = .Simple }),
        .optional_arbitrary_hifield = fd(1000010, .{ .Varint = .Simple }),
        .repeated_arbitrary_lowfield = fd(11, .{ .List = .{ .Varint = .Simple } }),
        .repeated_arbitrary_midfield = fd(1011, .{ .List = .{ .Varint = .Simple } }),
        .repeated_arbitrary_hifield = fd(1000011, .{ .List = .{ .Varint = .Simple } }),
        .packed_arbitrary_lowfield = fd(12, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_arbitrary_midfield = fd(1012, .{ .PackedList = .{ .Varint = .Simple } }),
        .packed_arbitrary_hifield = fd(1000012, .{ .PackedList = .{ .Varint = .Simple } }),
        .other_field = fd(99, .{ .Varint = .Simple }),
    };

    pub const SeqSmall0 = enum(i32) {
        SEQ_SMALL_0_DEFAULT = 0,
        SEQ_SMALL_0_1 = 1,
        SEQ_SMALL_0_2 = 2,
        _,
    };

    pub const SeqSmall1 = enum(i32) {
        SEQ_SMALL_1_DEFAULT = 1,
        SEQ_SMALL_1_2 = 2,
        SEQ_SMALL_1_3 = 3,
        _,
    };

    pub const SeqLarge = enum(i32) {
        SEQ_LARGE_DEFAULT = -1,
        SEQ_LARGE_0 = 0,
        SEQ_LARGE_1 = 1,
        SEQ_LARGE_2 = 2,
        SEQ_LARGE_3 = 3,
        SEQ_LARGE_4 = 4,
        SEQ_LARGE_5 = 5,
        SEQ_LARGE_6 = 6,
        SEQ_LARGE_7 = 7,
        SEQ_LARGE_8 = 8,
        SEQ_LARGE_9 = 9,
        SEQ_LARGE_10 = 10,
        SEQ_LARGE_11 = 11,
        SEQ_LARGE_12 = 12,
        SEQ_LARGE_13 = 13,
        SEQ_LARGE_14 = 14,
        SEQ_LARGE_15 = 15,
        SEQ_LARGE_16 = 16,
        SEQ_LARGE_17 = 17,
        SEQ_LARGE_18 = 18,
        SEQ_LARGE_19 = 19,
        SEQ_LARGE_20 = 20,
        SEQ_LARGE_21 = 21,
        SEQ_LARGE_22 = 22,
        SEQ_LARGE_23 = 23,
        SEQ_LARGE_24 = 24,
        SEQ_LARGE_25 = 25,
        SEQ_LARGE_26 = 26,
        SEQ_LARGE_27 = 27,
        SEQ_LARGE_28 = 28,
        SEQ_LARGE_29 = 29,
        SEQ_LARGE_30 = 30,
        SEQ_LARGE_31 = 31,
        SEQ_LARGE_32 = 32,
        SEQ_LARGE_33 = 33,
        _,
    };

    pub const Arbitrary = enum(i32) {
        ARBITRARY_DEFAULT = -123123,
        ARBITRARY_1 = -123,
        ARBITRARY_2 = 213,
        ARBITRARY_3 = 213213,
        ARBITRARY_MIN = -2147483648,
        ARBITRARY_MAX = 2147483647,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
