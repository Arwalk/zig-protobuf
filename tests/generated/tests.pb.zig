// Code generated by protoc-gen-zig
///! package tests
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const fd = protobuf.fd;
const json = protobuf.json;
const UnionDecodingError = protobuf.UnionDecodingError;
/// import package tests.oneof
const tests_oneof = @import("tests/oneof.pb.zig");
/// import package graphics
const graphics = @import("graphics.pb.zig");
/// import package tests.longs
const tests_longs = @import("tests/longs.pb.zig");
/// import package opentelemetry.proto.metrics.v1
const opentelemetry_proto_metrics_v1 = @import("opentelemetry/proto/metrics/v1.pb.zig");
/// import package opentelemetry.proto.logs.v1
const opentelemetry_proto_logs_v1 = @import("opentelemetry/proto/logs/v1.pb.zig");
/// import package protobuf_test_messages.proto3
pub const protobuf_test_messages_proto3 = @import("protobuf_test_messages/proto3.pb.zig");
/// import package unittest
pub const unittest = @import("unittest.pb.zig");
/// import package selfref
const selfref = @import("selfref.pb.zig");
/// import package oneofselfref
const oneofselfref = @import("oneofselfref.pb.zig");
/// import package jspb.test
pub const jspb_test = @import("jspb/test.pb.zig");
/// import package vector_tile
pub const vector_tile = @import("vector_tile.pb.zig");

pub const FixedSizes = struct {
    sfixed64: i64 = 0,
    sfixed32: i32 = 0,
    fixed32: u32 = 0,
    fixed64: u64 = 0,
    double: f64 = 0,
    float: f32 = 0,

    pub const _desc_table = .{
        .sfixed64 = fd(1, .{ .FixedInt = .I64 }),
        .sfixed32 = fd(2, .{ .FixedInt = .I32 }),
        .fixed32 = fd(3, .{ .FixedInt = .I32 }),
        .fixed64 = fd(4, .{ .FixedInt = .I64 }),
        .double = fd(5, .{ .FixedInt = .I64 }),
        .float = fd(6, .{ .FixedInt = .I32 }),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const TopLevelEnum = enum(i32) {
    SE_ZERO = 0,
    SE2_ZERO = 3,
    SE2_ONE = 4,
    _,
};

pub const WithEnum = struct {
    value: WithEnum.SomeEnum = @enumFromInt(0),

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub const SomeEnum = enum(i32) {
        SE_ZERO = 0,
        SE_ONE = 1,
        A = 3,
        B = 4,
        _,
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const WithEnumShadow = struct {
    value: WithEnumShadow.SomeEnum = @enumFromInt(0),

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub const SomeEnum = enum(i32) {
        SE_ZERO = 0,
        SE2_ZERO = 3,
        SE2_ONE = 4,
        _,
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const RepeatedEnum = struct {
    value: ArrayList(TopLevelEnum),

    pub const _desc_table = .{
        .value = fd(1, .{ .List = .{ .Varint = .Simple } }),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const Packed = struct {
    int32_list: ArrayList(i32),
    uint32_list: ArrayList(u32),
    sint32_list: ArrayList(i32),
    float_list: ArrayList(f32),
    double_list: ArrayList(f64),
    int64_list: ArrayList(i64),
    sint64_list: ArrayList(i64),
    uint64_list: ArrayList(u64),
    bool_list: ArrayList(bool),
    enum_list: ArrayList(TopLevelEnum),

    pub const _desc_table = .{
        .int32_list = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
        .uint32_list = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
        .sint32_list = fd(3, .{ .PackedList = .{ .Varint = .ZigZagOptimized } }),
        .float_list = fd(4, .{ .PackedList = .{ .FixedInt = .I32 } }),
        .double_list = fd(5, .{ .PackedList = .{ .FixedInt = .I64 } }),
        .int64_list = fd(6, .{ .PackedList = .{ .Varint = .Simple } }),
        .sint64_list = fd(7, .{ .PackedList = .{ .Varint = .ZigZagOptimized } }),
        .uint64_list = fd(8, .{ .PackedList = .{ .Varint = .Simple } }),
        .bool_list = fd(9, .{ .PackedList = .{ .Varint = .Simple } }),
        .enum_list = fd(10, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const UnPacked = struct {
    int32_list: ArrayList(i32),
    uint32_list: ArrayList(u32),
    sint32_list: ArrayList(i32),
    float_list: ArrayList(f32),
    double_list: ArrayList(f64),
    int64_list: ArrayList(i64),
    sint64_list: ArrayList(i64),
    uint64_list: ArrayList(u64),
    bool_list: ArrayList(bool),
    enum_list: ArrayList(TopLevelEnum),

    pub const _desc_table = .{
        .int32_list = fd(1, .{ .List = .{ .Varint = .Simple } }),
        .uint32_list = fd(2, .{ .List = .{ .Varint = .Simple } }),
        .sint32_list = fd(3, .{ .List = .{ .Varint = .ZigZagOptimized } }),
        .float_list = fd(4, .{ .List = .{ .FixedInt = .I32 } }),
        .double_list = fd(5, .{ .List = .{ .FixedInt = .I64 } }),
        .int64_list = fd(6, .{ .List = .{ .Varint = .Simple } }),
        .sint64_list = fd(7, .{ .List = .{ .Varint = .ZigZagOptimized } }),
        .uint64_list = fd(8, .{ .List = .{ .Varint = .Simple } }),
        .bool_list = fd(9, .{ .List = .{ .Varint = .Simple } }),
        .enum_list = fd(10, .{ .List = .{ .Varint = .Simple } }),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const WithSubmessages = struct {
    with_enum: ?WithEnum = null,

    pub const _desc_table = .{
        .with_enum = fd(1, .{ .SubMessage = {} }),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const WithStrings = struct {
    name: []const u8 = &.{},

    pub const _desc_table = .{
        .name = fd(1, .String),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const WithRepeatedStrings = struct {
    name: ArrayList([]const u8),

    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const WithBytes = struct {
    byte_field: []const u8 = &.{},

    pub const _desc_table = .{
        .byte_field = fd(1, .Bytes),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};

pub const WithRepeatedBytes = struct {
    byte_field: ArrayList([]const u8),

    pub const _desc_table = .{
        .byte_field = fd(1, .{ .List = .Bytes }),
    };

    pub fn encode(self: @This(), writer: std.io.AnyWriter, allocator: Allocator) (std.io.AnyWriter.Error || Allocator.Error)!void {
        return protobuf.pb_encode(writer, allocator, self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.pb_decode(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_init(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: std.mem.Allocator) void {
        return protobuf.pb_deinit(allocator, self);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.pb_dupe(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.pb_json_decode(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.pb_json_encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.pb_json_parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.pb_jsonStringify(@This(), self, jws);
    }
};
